#define PLAY_ERROR_ON_START_OR_CONFIRM
((on_start
      ($user)
      {synth play button_error.cue})
   (BUTTON_DOWN_MSG
      {if_else
         {== $action kAction_Confirm}
         {synth play button_error.cue}
         kDataUnhandled}))
(kState_NoInstrument
   (view no_instrument)
   (allows_hiding TRUE)
   (ready_to_play TRUE)
   (retracted_position TRUE)
   PLAY_ERROR_ON_START_OR_CONFIRM)
(kState_Join
   (view join)
   (allows_hiding TRUE)
   (ready_to_play TRUE)
   (retracted_position TRUE)
   (on_start
      ($user)
      {overshell attempt_to_add_user $user}
      {play_instr_sfx $user button_select})
   (BUTTON_DOWN_MSG
      {if_else
         {== $action kAction_Confirm}
         {do
            {overshell attempt_to_add_user $user}
            {play_instr_sfx $user button_select}}
         kDataUnhandled}))
(kState_SignIn
   (view join)
   (allows_hiding TRUE)
   (ready_to_play TRUE)
   (retracted_position TRUE)
   (BUTTON_DOWN_MSG
      {if_else
         {== $action kAction_Confirm}
         {unless
            {$this in_song}
            {ui_event_mgr trigger_event sign_in}}
         kDataUnhandled})
   (on_start
      ($user)
      {unless
         {$this in_song}
         {ui_event_mgr trigger_event sign_in}}))
(kState_ConnectMic
   (view connect_mic)
   (allows_hiding TRUE)
   (ready_to_play TRUE)
   (retracted_position TRUE)
   PLAY_ERROR_ON_START_OR_CONFIRM)
(kState_NoJoinInGame
   (view no_join_in_game)
   (allows_hiding TRUE)
   (ready_to_play TRUE)
   (retracted_position TRUE)
   PLAY_ERROR_ON_START_OR_CONFIRM)
(kState_Finding
   (view finding)
   (retracted_position TRUE)
   PLAY_ERROR_ON_START_OR_CONFIRM)
(kState_JoinedDefault
   (view joined_default)
   (allows_input_to_shell TRUE)
   (allows_hiding TRUE)
   (ready_to_play TRUE)
   (retracted_position TRUE)
   (on_start
      ($user)
      {if
         {'||'
            {$user is_participating}
            {!
               {$this in_song}}}
         {$this show_options}}))
(kState_ChooseChar
   (view choose_char)
   (choose_char_flow TRUE)
   (remote_status remote_status_choose_char)
   (enter
      {prefab_mgr load_portraits $this}
      {if
         {{$this get_user}
            is_local}
         {$this update_character_list}}
      {handle
         ($this set_default_option '')}
      {handle
         ($this
            set_default_option_index
            {$this get_default_char_index})})
   (exit
      {prefab_mgr unload_portraits $this})
   (update_view
      {if
         {==
            {$this focus_name}
            chars.lst}
         {$this update_character_list}
         {$this
            refresh_highlighted_char
            {chars.lst selected_pos}}})
   (SCROLL_MSG
      {$this update})
   (SELECT_MSG
      {$this
         select_char
         {chars.lst selected_pos}})
   (on_cancel
      {if_else
         {{$this get_user}
            has_char}
         {$this show_options}
         {$this attempt_remove_user}})
   (BUTTON_DOWN_MSG
      {if_else
         {== $action kAction_Option}
         {do
            ($index
               {chars.lst selected_pos})
            {if
               {$this can_edit_character $index}
               {$this
                  show_char_edit
                  {chars.lst selected_pos}}}}
         kDataUnhandled}))
(kState_ChooseCharDenial
   (view confirm_action)
   (update_view
      {handle
         ($this set_confirm_message error_cannot_choose_char_while_editing)})
   (on_cancel
      {$this show_options})
   (SELECT_MSG
      {$this show_options}))
(kState_ChooseContribute
   (view confirm_action)
   (prevents_override TRUE)
   (update_view
      {handle
         ($this
            set_confirm_actions
            overshell_choose_contribute
            (overshell_confirm_yes overshell_confirm_no))})
   (on_cancel
      {$this attempt_remove_user})
   (SELECT_MSG
      {do
         ($user
            {$this get_user})
         {switch
            {$component selected_sym}
            (overshell_confirm_yes
               {$user set_contributes_song_progress TRUE})
            (overshell_confirm_no
               {$user set_contributes_song_progress FALSE})}}
      {$this leave_options}))
#ifdef HX_WII
(kState_ChooseProfile
   (view choose_profile_wii)
   (prevents_override TRUE)
   (enter
      {$this set_wiiprofile_list_mode kWiiProfileListMode_Entry})
   (on_cancel
      {$this attempt_remove_user})
   (SELECT_MSG
      {$this
         act_on_user_profile
         {profiles_wii.lst selected_pos}}))
(kState_WiiProfileList
   (view choose_profile_wii)
   (prevents_override TRUE)
   (on_cancel
      {$this cancel_wii_profile_selector})
   (SELECT_MSG
      {$this
         act_on_user_profile
         {profiles_wii.lst selected_pos}}))
(kState_WiiProfileConfirm
   (view confirm_action)
   (prevents_override TRUE)
   (enter
      {switch
         {$this get_wiiprofile_list_mode}
         (kWiiProfileListMode_Entry
            {handle
               ($this
                  set_confirm_actions
                  overshell_wiiprofile_guest_confirm
                  (overshell_confirm_yes overshell_confirm_no))})
         (kWiiProfileListMode_Register
            {handle
               ($this
                  set_confirm_actions
                  overshell_wiiprofile_register_confirm
                  (overshell_confirm_yes overshell_confirm_no))})
         (kWiiProfileListMode_Switch
            {handle
               ($this
                  set_confirm_actions
                  overshell_wiiprofile_guest_confirm
                  (overshell_confirm_yes overshell_confirm_no))})
         (kWiiProfileListMode_Create
            {handle
               ($this
                  set_confirm_actions
                  overshell_wiiprofile_create_confirm
                  (overshell_confirm_yes overshell_confirm_no))})
         (kWiiProfileListMode_Delete
            {handle
               ($this
                  set_confirm_actions
                  overshell_wiiprofile_delete_confirm
                  (overshell_confirm_yes overshell_confirm_no))}
            {confirm_question.lbl
               set_token_fmt
               overshell_wiiprofile_delete_confirm
               {$this get_wiiprofile_list_selected_name}}
            {confirm_action.lst set_selected overshell_confirm_no FALSE})})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {wiiprofile_panel set_user $user}
            {splash_panel set last_user $user}
            {$this act_on_user_profile_confirm}
            {saveload_mgr autosave})
         (overshell_confirm_no
            {if_else
               {==
                  {$this get_wiiprofile_list_mode}
                  kWiiProfileListMode_Entry}
               {$this show_profiles}
               {$this cancel_wii_profile_selector}})}))
(kState_WiiProfileSwitchConfirm
   (view confirm_action)
   (prevents_override TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_wiiprofile_switch_confirm
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this act_on_user_profile_confirm})
         (overshell_confirm_no
            {if_else
               {==
                  {$this get_wiiprofile_list_mode}
                  kWiiProfileListMode_Entry}
               {$this show_profiles}
               {$this cancel_wii_profile_selector}})}))
(kState_WiiProfilePreconfirm
   (view confirm_action)
   (prevents_override TRUE)
   (enter
      {switch
         {$this get_wiiprofile_list_mode}
         (kWiiProfileListMode_Delete
            {handle
               ($this
                  set_confirm_actions
                  overshell_wiiprofile_delete_preconfirm
                  (overshell_confirm_yes overshell_confirm_no))}
            {confirm_question.lbl
               set_token_fmt
               overshell_wiiprofile_delete_preconfirm
               {$this get_wiiprofile_list_selected_name}}
            {confirm_action.lst set_selected overshell_confirm_no FALSE})})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this show_wiiprofile_confirm})
         (overshell_confirm_no
            {if_else
               {==
                  {$this get_wiiprofile_list_mode}
                  kWiiProfileListMode_Entry}
               {$this show_profiles}
               {$this cancel_wii_profile_selector}})}))
(kState_WiiProfilePostAction
   (view confirm_action)
   (prevents_override TRUE)
   (enter
      {switch
         {$this get_wiiprofile_list_mode}
         (kWiiProfileListMode_Delete
            {handle
               ($this set_confirm_message overshell_wiiprofile_delete_post)})})
   (SELECT_MSG
      {if_else
         {==
            {$this get_wiiprofile_list_mode}
            kWiiProfileListMode_Entry}
         {$this show_profiles}
         {$this leave_options}}))
(kState_WiiProfileFail
   (view confirm_action)
   (prevents_override TRUE)
   (enter
      {switch
         {$this get_wiiprofile_list_mode}
         (kWiiProfileListMode_Entry
            {handle
               ($this set_confirm_message overshell_wiiprofile_swap_fail)})
         (kWiiProfileListMode_Register
            {if_else
               {&&
                  {!
                     {memcardmgr is_disable_writing}}
                  {!
                     {overshell in_override_flow kOverrideFlow_SongSettings}}}
               {handle
                  ($this set_confirm_message overshell_wiiprofile_register_fail)}
               {handle
                  ($this set_confirm_message overshell_wiiprofile_register_denial_in_override)}})
         (kWiiProfileListMode_Switch
            {handle
               ($this set_confirm_message overshell_wiiprofile_swap_fail)})
         (kWiiProfileListMode_Create
            {if_else
               {&&
                  {!
                     {memcardmgr is_disable_writing}}
                  {!
                     {overshell in_override_flow kOverrideFlow_SongSettings}}}
               {handle
                  ($this set_confirm_message overshell_wiiprofile_create_fail)}
               {handle
                  ($this set_confirm_message overshell_wiiprofile_create_denial_in_override)}})
         (kWiiProfileListMode_Delete
            {if_else
               {==
                  {$this is_wiiprofile_delete_queue_full}
                  TRUE}
               {handle
                  ($this set_confirm_message overshell_wiiprofile_delete_full)}
               {handle
                  ($this set_confirm_message overshell_wiiprofile_delete_fail)}})})
   (SELECT_MSG
      {if_else
         {==
            {$this get_wiiprofile_list_mode}
            kWiiProfileListMode_Entry}
         {$this show_profiles}
         {$this leave_options}}))
(kState_WiiProfileFailBusy
   (view confirm_action)
   (prevents_override TRUE)
   (enter
      {switch
         {$this get_wiiprofile_list_mode}
         (kWiiProfileListMode_Entry
            {handle
               ($this set_confirm_message overshell_wiiprofile_create_denial_in_override)})
         (kWiiProfileListMode_Register
            {handle
               ($this set_confirm_message overshell_wiiprofile_register_denial_in_override)})
         (kWiiProfileListMode_Switch
            {handle
               ($this set_confirm_message overshell_wiiprofile_swap_fail)})
         (kWiiProfileListMode_Create
            {handle
               ($this set_confirm_message overshell_wiiprofile_create_denial_in_override)})
         (kWiiProfileListMode_Delete
            {handle
               ($this set_confirm_message overshell_wiiprofile_delete_full)})})
   (SELECT_MSG
      {if_else
         {==
            {$this get_wiiprofile_list_mode}
            kWiiProfileListMode_Entry}
         {$this show_profiles}
         {$this cancel_wii_profile_selector}}))
(kState_WiiProfileFailCreate
   (view confirm_action)
   (prevents_override TRUE)
   (enter
      {switch
         {$this get_wiiprofile_list_mode}
         (kWiiProfileListMode_Entry
            {handle
               ($this set_confirm_message overshell_wiiprofile_create_denial_in_override)})
         (kWiiProfileListMode_Switch
            {handle
               ($this set_confirm_message overshell_wiiprofile_create_denial_in_override)})
         (kWiiProfileListMode_Create
            {if_else
               {&&
                  {!
                     {memcardmgr is_disable_writing}}
                  {!
                     {overshell in_override_flow kOverrideFlow_SongSettings}}}
               {handle
                  ($this set_confirm_message overshell_wiiprofile_create_fail)}
               {handle
                  ($this set_confirm_message overshell_wiiprofile_create_denial_in_override)}})})
   (SELECT_MSG
      {if_else
         {==
            {$this get_wiiprofile_list_mode}
            kWiiProfileListMode_Entry}
         {$this show_profiles}
         {$this leave_options}}))
(kState_WiiProfileSwapFail
   (view confirm_action)
   (prevents_override TRUE)
   (enter
      {handle
         ($this set_confirm_message overshell_wiiprofile_swap_fail)})
   (SELECT_MSG
      {if_else
         {==
            {$this get_wiiprofile_list_mode}
            kWiiProfileListMode_Entry}
         {$this show_profiles}
         {$this cancel_wii_profile_selector}}))
(kState_WiiProfileListEmpty
   (view confirm_action)
   (prevents_override TRUE)
   (enter
      {switch
         {$this get_wiiprofile_list_mode}
         (kWiiProfileListMode_Register
            {handle
               ($this set_confirm_message overshell_wiiprofile_register_empty)})
         (kWiiProfileListMode_Switch
            {handle
               ($this set_confirm_message overshell_wiiprofile_switch_empty)})
         (kWiiProfileListMode_Create
            {handle
               ($this set_confirm_message overshell_wiiprofile_create_empty)})
         (kWiiProfileListMode_Delete
            {handle
               ($this set_confirm_message overshell_wiiprofile_delete_empty)})})
   (SELECT_MSG
      {$this cancel_wii_profile_selector}))
(kState_WiiProfileOptions
   (view wiiprofile_options)
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_wiiprofile_register
            {$this show_wiiprofile_list kWiiProfileListMode_Register})
         (overshell_wiiprofile_switch
            {$this show_wiiprofile_list kWiiProfileListMode_Switch})
         (overshell_wiiprofile_create
            {$this show_wiiprofile_list kWiiProfileListMode_Create})
         (overshell_wiiprofile_delete
            {$this show_wiiprofile_list kWiiProfileListMode_Delete})
         (overshell_return
            {$this leave_options})})
   (on_cancel
      {$this show_options}))
(kState_RegisterWiiProfile
   (view wait_wii)
   (prevents_override TRUE)
   (enter
      {if_else
         {&&
            {!
               {memcardmgr is_disable_writing}}
            {!
               {overshell in_override_flow kOverrideFlow_SongSettings}}
            {==
               {wiiprofile_panel get_wiiprofile_state}
               kWiiProfileState_None}
            {!
               {ui_event_mgr has_transition_event invite_accepted}}}
         {do
            {wiiprofile_panel
               set_wiiprofile_index
               {$this get_wiiprofile_last_index}}
            {wiiprofile_panel set_wiiprofile_state kWiiProfileState_Register}
            {overshell set_active_status kOvershellInactive}
            {$this leave_options}
            {ui_event_mgr
               trigger_event
               go_to_wiiprofilecreator
               (dummy init $user)}}
         {do
            {if_else
               {!=
                  {wiiprofile_panel get_wiiprofile_state}
                  kWiiProfileState_None}
               {$this show_wiiprofile_fail_busy}
               {$this show_wiiprofile_fail}}}}))
(kState_EnterWiiProfile
   (view confirm_action)
   (prevents_override TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_enter_new_wiiprofile
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {splash_panel set last_user $user}
            {wiiprofile_panel set_user $user}
            {if_else
               {$this is_wiiprofile_full}
               {$this show_wiiprofile_fail}
               {do
                  {if_else
                     {&&
                        {!
                           {memcardmgr is_disable_writing}}
                        {!
                           {overshell in_override_flow kOverrideFlow_SongSettings}}
                        {==
                           {wiiprofile_panel get_wiiprofile_state}
                           kWiiProfileState_None}
                        {!
                           {ui_event_mgr has_transition_event invite_accepted}}}
                     {do
                        {wiiprofile_panel set_wiiprofile_state kWiiProfileState_New}
                        {overshell set_active_status kOvershellInactive}
                        {$this leave_options}
                        {if_else
                           {!
                              {wiiprofile_panel is_delay}}
                           {do
                              {ui_event_mgr
                                 trigger_event
                                 go_to_wiiprofilecreator
                                 (dummy init $user)}}
                           {do
                              {splash_panel set last_user $user}}}}
                     {do
                        {if_else
                           {!=
                              {wiiprofile_panel get_wiiprofile_state}
                              kWiiProfileState_None}
                           {$this show_wiiprofile_fail_busy}
                           {$this show_wiiprofile_fail}}}}}})
         (overshell_confirm_no
            {if_else
               {==
                  {$this get_wiiprofile_list_mode}
                  kWiiProfileListMode_Entry}
               {$this show_profiles}
               {$this cancel_wii_profile_selector}})}))
(kState_WiiProfileGuestConfirm
   (view confirm_action)
   (prevents_override TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_wiiprofile_guest_confirm
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this select_guest_profile}
            {$this leave_options})
         (overshell_confirm_no
            {$this show_profiles})}))
(kState_WiiProfileRemoveUserConfirm
   (view confirm_action)
   (prevents_override TRUE)
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this show_wiiprofile_list kWiiProfileListMode_Confirmed})
         (overshell_confirm_no
            {$this show_wiiprofile_options})})
   (on_cancel
      {$this show_wiiprofile_options}))
(kState_ChooseProfileConfirm
   (view confirm_action)
   (prevents_override TRUE)
   (on_cancel
      {$this show_profiles})
   (update_view
      {handle
         ($this
            set_confirm_actions
            overshell_confirm_swap_profile
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {if
               {!
                  {$this confirm_swap_user_profile}}
               {do
                  {$this show_wiiprofile_swap_fail}}})
         (overshell_confirm_no
            {$this show_profiles})}))
(kState_WiiProfileDenial
   (view confirm_action)
   (prevents_override TRUE)
   (update_view
      {handle
         ($this set_confirm_message overshell_wiiprofile_create_denial_remote_players)})
   (SELECT_MSG
      {$this show_profiles})
   (on_cancel
      {$this show_profiles}))
(kState_RegisterWiiProfileDenial
   (view confirm_action)
   (prevents_override TRUE)
   (update_view
      {handle
         ($this set_confirm_message overshell_wiiprofile_register_denial_remote_players)})
   (SELECT_MSG
      {$this cancel_wii_profile_selector})
   (on_cancel
      {$this cancel_wii_profile_selector}))
(kState_WaitWii
   (view wait_wii))
#else
(kState_ChooseProfile
   (view choose_profile)
   (prevents_override TRUE)
   (on_cancel
      {$this attempt_remove_user})
   (update_view
      {$this update_profiles_list})
   (SELECT_MSG
      {if_else
         {== $component profiles.lst}
         {$this
            attempt_swap_user_profile
            {profiles.lst selected_pos}}
         {switch
            {$component selected_sym}
            (overshell_continue_without_profile
               {$this leave_options})
            (overshell_sign_in
               {platform_mgr signin 1})}}))
(kState_ChooseProfileConfirm
   (view confirm_action)
   (prevents_override TRUE)
   (on_cancel
      {$this show_choose_profile})
   (update_view
      {handle
         ($this
            set_confirm_actions
            overshell_confirm_swap_profile
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this confirm_swap_user_profile})
         (overshell_confirm_no
            {$this show_choose_profile})}))
#endif
(kState_Options
   (view
      {if_else
         {'||'
            {$this in_game}
            {gamemode in_mode drum_freestyle}}
         options_in_game
         options})
   (update_view
      {handle
         ($this
            update_online_options_allowed
            {!
               {session_mgr is_busy}})}
      {do
         ($in_game_options
            {'||'
               {$this in_game}
               {gamemode in_mode drum_freestyle}})
         ($showing_metronome
            {&&
               {gamemode get show_metronome_options}
               {==
                  {{$this get_user}
                     get_controller_type}
                  kControllerDrum}})
         ($can_skip_song
            {&&
               {$this in_song}
               {{$this get_session_mgr}
                  is_leader_local}
               {exists meta_performer}
               {>
                  {meta_performer num_songs}
                  1}
               {!
                  {meta_performer is_set_complete}}
               {!
                  {meta_performer is_last_song}}
               {gamemode get can_skip_songs}})
         ($can_quit
            {'||'
               {{$this get_session_mgr}
                  is_leader_local}
               {gamemode get non_leader_can_quit}})
         ($show_pause_restart
            {&&
               {gamemode get show_pause_restart}
               {$this in_song}})
         ($restart_allowed
            {{$this get_session_mgr}
               is_leader_local})
         {if_else
            $in_game_options
            {do
               {handle
                  ($this
                     update_in_game_options
                     {gamemode get pause_menu_quit_token}
                     $can_skip_song
                     $show_pause_restart
                     {gamemode get show_change_difficulty}
                     $showing_metronome
                     {gamemode get show_pause_practice_new}
                     {gamemode get show_pause_trainer}
                     $can_quit)}
               {handle
                  ($this update_restart_allowed $restart_allowed)}}
            {handle
               ($this
                  setup_options_list
                  {{$this get_session_mgr}
                     is_online_enabled})}}
         {handle
            ($this
               update_can_access_song_options_in_game
               {$this in_song})}
         {handle
            ($this update_metronome_check $showing_metronome)}
         {if
            $showing_metronome
            {metronome_vol.sld set_num_steps 12}
            {metronome_vol_freestyle.sld set_num_steps 12}
            {handle
               ($this
                  update_slider
                  metronome_vol.sld
                  "")}
            {handle
               ($this
                  update_slider
                  metronome_vol_freestyle.sld
                  "")}}})
   (SELECT_MSG
      {if_else
         {$this
            is_quit_token
            {$component selected_sym}}
         {if_else
            {gamemode get skip_quit_prompt}
            {ui_event_mgr trigger_event quit_early}
            {$this show_state kState_QuitEarlyConfirm}}
         {switch
            {$component selected_sym}
            (overshell_change_character
               {$this show_chars})
            (overshell_end_game
               {$this show_options_end_game})
            (overshell_restart
               {do
                  {if_else
                     {gamemode in_mode practice}
                     {set
                        $restart_allowed
                        {practice_panel get_restart_allowed}}
                     {set $restart_allowed true}}
                  {if_else
                     $restart_allowed
                     {if_else
                        {gamemode get skip_restart_prompt}
                        {if_else
                           {gamemode in_mode trainer}
                           {{gamemode get game_panel}
                              restart_section}
                           {session end_game kRestart}}
                        {$this show_state kState_RestartConfirm}}
                     {$this leave_options}}})
            (overshell_change_diff
               {$this begin_override_flow kOverrideFlow_SongSettings})
            (overshell_practice_new_section
               {ui_event_mgr trigger_event go_to_practice_screen})
            (overshell_metronome
               {metronome.chk
                  set
                  checked
                  {!
                     {metronome.chk get checked}}}
               {{gamemode get game_panel}
                  enable_metronome
                  {metronome.chk get checked}})
            (overshell_relearn_chords
               {{gamemode get game_panel}
                  relearn_chords}
               {$this show_chord_book})
            (overshell_metronome_volume
               {if_else
                  {gamemode in_mode drum_freestyle}
                  {do
                     {metronome_vol_freestyle.sld store}
                     {metronome_vol_freestyle.sld set_showing TRUE}
                     {$this set_focus metronome_vol_freestyle.sld}}
                  {do
                     {metronome_vol.sld store}
                     {metronome_vol.sld set_showing TRUE}
                     {$this set_focus metronome_vol.sld}}})
            (overshell_return
               {$this leave_options})
            (overshell_online_options
               {$this show_online_options})
            (overshell_register_online
               {$this attempt_register_online})
            (overshell_game_options
               {$this show_game_options})
            (overshell_leave
               {$this attempt_remove_user})
            #ifdef HX_WII
            (overshell_wiiprofile_options
               {do
                  {$this
                     setup_wiiprofile_options_list
                     {$this get_user}}
                  {$this show_wiiprofile_options}})
            (wii_friends_view_invite
               {do
                  {rock_central clear_pending_invitations}
                  {$this show_choose_invitation}
                  {{$this get_state}
                     set
                     return_to_options_menu
                     TRUE}})
            #endif}})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user})
   (BUTTON_DOWN_MSG
      {cond
         ({==
               {$this focus_name}
               "metronome_vol.sld"}
            {switch
               $action
               ((kAction_Confirm kAction_Cancel)
                  {metronome_vol.sld confirm}
                  {metronome_vol.sld set_showing FALSE}
                  {$this set_focus options.lst})
               kDataUnhandled})
         ({==
               {$this focus_name}
               "metronome_vol_freestyle.sld"}
            {switch
               $action
               ((kAction_Confirm kAction_Cancel)
                  {metronome_vol_freestyle.sld confirm}
                  {metronome_vol_freestyle.sld set_showing FALSE}
                  {$this set_focus options.lst})
               kDataUnhandled})
         kDataUnhandled})
   (on_cancel
      {$this leave_options})
   (on_start
      ($user)
      {$this leave_options}))
(kState_OptionsEndGame
   (view options_end_game)
   (SELECT_MSG
      {cond
         ({$this
               is_quit_token
               {$component selected_sym}}
            {$this show_state kState_QuitEarlyConfirm})
         ({==
               {$component selected_sym}
               overshell_skip_song}
            {$this show_state kState_SkipSongConfirm})})
   (on_cancel
      {$this show_options}))
(kState_QuitEarlyConfirm
   (view confirm_action)
   (update_view
      {if_else
         {{$this get_session_mgr}
            is_local}
         {handle
            ($this
               set_confirm_actions
               confirm_quit
               (overshell_confirm_yes overshell_confirm_no))}
         {handle
            ($this
               set_confirm_actions
               confirm_quit_online
               (overshell_confirm_yes overshell_confirm_no))}})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {ui_event_mgr trigger_event quit_early}
            {$this leave_options})
         (overshell_confirm_no
            {$this show_options})})
   (on_cancel
      {$this show_options}))
(kState_RestartConfirm
   (view confirm_action)
   (update_view
      {handle
         ($this
            set_confirm_actions
            confirm_restart
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {if_else
               {gamemode in_mode trainer}
               {{gamemode get game_panel}
                  restart_section}
               {session end_game kRestart}})
         (overshell_confirm_no
            {$this show_options})})
   (on_cancel
      {$this show_options}))
(kState_SkipSongConfirm
   (view confirm_action)
   (update_view
      {handle
         ($this
            set_confirm_actions
            confirm_quit
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {session end_game kSkip}
            {$this leave_options})
         (overshell_confirm_no
            {$this show_options})})
   (on_cancel
      {$this show_options}))
(kState_OnlineOptions
   (view online_options)
   (update_view
      {do
         ($session_mgr
            {$this get_session_mgr})
         ($is_local
            {$session_mgr is_local})
         ($has_remote_users
            {$session_mgr has_remote_users})
         ($is_leader_local
            {$session_mgr is_leader_local})
         ($are_invites_allowed
            {$session_mgr are_invites_allowed})
         #ifdef HX_XBOX
         ($is_partying
            {&&
               {platform_mgr is_in_party_with_others}
               {$session_mgr are_invites_allowed}})
         {handle
            ($this update_in_xbox_party $is_partying)}
         #endif
         #ifdef HX_WII
         {$this setup_online_options_list wii}
         #endif
         {handle
            ($this
               update_kick_allowed
               {&&
                  {! $is_local}
                  $is_leader_local})}
         {handle
            ($this
               update_wiispeak_toggle_allowed
               {true})}
         #ifndef HX_WII
         {handle
            ($this update_mute_allowed false)}
         #endif
         {handle
            ($this update_invites_allowed $are_invites_allowed)}})
   (requires_online_session TRUE)
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_invite
            #ifdef HX_XBOX
            {platform_mgr show_user_friends $user}
            #else
            #ifdef HX_WII
            {if_else
               {$user is_signed_in_online}
               {if
                  {&&
                     {==
                        {ui current_screen}
                        main_hub_screen}
                     {!
                        {ui_event_mgr has_transition_event friends_screen_event}}}
                  {do
                     {main_hub_panel set_state kMainHubState_Main}
                     {input_mgr set_user $user}
                     {wiifriends_screen go_to_friends_screen $user}}}
               {ui_event_mgr trigger_event sign_in}}
            #else
            {$this show_invite_friends}
            #endif
            #endif)
         #ifdef HX_WII
         (overshell_import_wii_friends
            {if
               {==
                  {ui current_screen}
                  main_hub_screen}
               {do
                  {main_hub_panel set_state kMainHubState_Main}
                  {$this leave_options}
                  {wiifriends_screen go_to_import_friends_screen}}})
         (wii_friends_view_invite
            {do
               {rock_central clear_pending_invitations}
               {$this show_choose_invitation}
               {{$this get_state}
                  set
                  return_to_options_menu
                  FALSE}})
         #endif
         (overshell_wiispeak_toggle
            {$this toggle_wii_speak})
         (overshell_kick
            {$this show_kick_users})
         (overshell_mute
            {$this show_mute_users})
         (overshell_gamercard
            {$this show_gamercard_users})
         (overshell_disconnect
            {$this attempt_disconnect})
         (overshell_invite_xbox_party
            {platform_mgr invite_user_party $user})
         (overshell_check_invites
            {join_invite_panel set_joining_user $user}
            {platform_mgr check_mailbox})})
   (on_cancel
      {if_else
         {$this in_game}
         {$this show_game_options}
         {$this show_options}}))
(kState_DisconnectConfirm
   (view confirm_action)
   (requires_online_session TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_confirm_disconnect
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {session disconnect})
         (overshell_confirm_no
            {$this show_online_options})})
   (on_cancel
      {$this show_online_options}))
(kState_RemoveUserDisconnectConfirm
   (view confirm_action)
   (prevents_override TRUE)
   (remove_user_prompt TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_confirm_remove_user
            (overshell_confirm_yes overshell_confirm_no))}
      {handle
         ($this set_default_option overshell_confirm_no)})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this remove_user})
         (overshell_confirm_no
            {$this leave_options})})
   (on_cancel
      {$this leave_options}))
(kState_RemoveCriticalUserConfirm
   (view confirm_action)
   (prevents_override TRUE)
   (remove_user_prompt TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_confirm_remove_critical_user
            (overshell_confirm_yes overshell_confirm_no))}
      {handle
         ($this set_default_option overshell_confirm_no)})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this remove_user})
         (overshell_confirm_no
            {$this leave_options})})
   (on_cancel
      {$this leave_options}))
(kState_RemoveUserInCampaignConfirm
   (view confirm_action)
   (prevents_override TRUE)
   (remove_user_prompt TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_confirm_remove_critical_user
            (overshell_confirm_yes overshell_confirm_no))}
      {handle
         ($this set_default_option overshell_confirm_no)})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this remove_user})
         (overshell_confirm_no
            {$this leave_options})})
   (on_cancel
      {$this leave_options}))
(kState_RemoveUserInSongConfirm
   (view confirm_action)
   (prevents_override TRUE)
   (remove_user_prompt TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_confirm_remove_user_in_song
            (overshell_confirm_yes overshell_confirm_no))}
      {handle
         ($this set_default_option overshell_confirm_no)})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this remove_user})
         (overshell_confirm_no
            {$this show_options})})
   (on_cancel
      {$this show_options}))
(kState_RemoveUserDenial
   (view confirm_action)
   (update_view
      {handle
         ($this set_confirm_message overshell_remove_user_denial_failure_on)})
   (SELECT_MSG
      {$this show_options})
   (on_cancel
      {$this show_options}))
(kState_GameOptions
   (view game_options)
   (update_view
      {do
         ($controller
            {{$this get_user}
               get_controller_sym})
         ($controller_type
            {{$this get_user}
               get_controller_type})
         {if_else
            {'||'
               {== vocals $controller}
               {== keys $controller}
               {== drum $controller}}
            {do
               {instr_option.chk set checked FALSE}
               {instr_option.chk set_showing FALSE}}
            {do
               {instr_option.chk set_showing TRUE}
               {$this
                  update_options_check
                  {{$this get_user}
                     get_gameplay_options}}}}
         {handle
            ($this
               setup_game_options_list
               $controller_type
               {&&
                  {gamemode get show_pause_multiplayer}
                  {$this in_song}}
               {{$this get_session_mgr}
                  is_online_enabled}
               {$this in_game}
               {==
                  {user_mgr get_num_participants}
                  1})}}
      {handle
         ($this
            update_auto_vocals_enabled
            {modifier_mgr is_modifier_active mod_auto_vocals})}
      {do
         ($no_fail_enabled
            {modifier_mgr is_modifier_active mod_no_fail_band})
         {handle
            ($this update_no_fail_enabled $no_fail_enabled)}})
   (exit
      {instr_option.chk set_showing FALSE})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (mod_auto_vocals
            {$this attempt_toggle_auto_vocals})
         (mod_no_fail_band
            {if_else
               {session_mgr is_leader_local}
               {meta_performer
                  set_band_no_fail
                  {!
                     {meta_performer is_band_no_fail_set}}}
               {$this show_toggle_no_fail_denial}}
            {overshell update_all})
         (overshell_lefty_flip
            {do
               ($options
                  {{$this get_user}
                     get_gameplay_options})
               ($lefty_flipped
                  {$options get_lefty})
               {$options
                  set_lefty
                  {! $lefty_flipped}}
               {$this update}
               {if
                  {$user player}
                  {{$user player}
                     update_lefty_flip}}})
         (overshell_register_online
            {$this attempt_register_online})
         (overshell_online_options
            {$this show_online_options})
         (overshell_drum_options
            {$this show_options_drum})
         (overshell_vocal_options
            {$this show_options_vocal})
         (overshell_av_settings
            {$this show_options_av_settings})
         (overshell_extras
            {$this show_options_extras})
         (overshell_wiispeak_options
            {$this show_options_wiispeak})
         (overshell_modifiers
            {$this show_modifiers})
         (overshell_rb3esettings
            {$this show_state kState_RB3ESettings})})
   (on_cancel
      {$this show_options}))
(kState_ToggleNoFailDenial
   (view confirm_action)
   (update_view
      {handle
         ($this set_confirm_message overshell_toggle_no_fail_denial)})
   (SELECT_MSG
      {$this show_game_options})
   (on_cancel
      {$this show_game_options}))
(kState_OptionsAVSettings
   (view options_av_settings)
   (on_cancel
      {$this show_game_options})
   (update_view
      {handle
         ($this update_dolby_check)}
      {handle
         ($this update_bass_boost_check)}
      {handle
         ($this update_overscan_check)}
      {handle
         ($this update_sdmode_check)}
      {do
         ($user
            {$this get_user})
         ($enabled
            {if_else
               {$user can_save_data}
               {saveload_mgr is_autosave_enabled $user}
               FALSE})
         {$this
            update_autosave_enabled
            {!
               {saveload_mgr is_idle}}
            $enabled}}
      {$this
         set_options_signed_in
         {profile_mgr
            get_profile
            {$this get_user}}})
   (exit
      {unless
	  {'||'
         {$this in_game}
		 {modifier_mgr is_modifier_active mod_auto_play}}
         {saveload_mgr autosave}})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_calibration
            {$this show_enter_calibration})
         (overshell_dolby
            {profile_mgr
               set_dolby
               {!
                  {profile_mgr get_dolby}}}
            {$this update_dolby_check})
         (overshell_bass_boost
            {profile_mgr
               set_bass_boost
               {!
                  {profile_mgr get_bass_boost}}}
            {$this update_bass_boost_check})
         (overshell_overscan
            {profile_mgr
               set_overscan
               {!
                  {profile_mgr get_overscan}}}
            {$this update_overscan_check})
         (overshell_audio_options
            {$this show_options_audio})
         (overshell_autosave_enabled
            {if_else
               {meta is_up}
               {if_else
                  {saveload_mgr is_idle}
                  {do
                     {if_else
                        {saveload_mgr is_autosave_enabled $user}
                        {$this show_saveloadmgr_autosave_confirm}
                        {unless {|| {! $gotcha} {modifier_mgr is_modifier_active mod_auto_play}}
                        {saveload_mgr enable_autosave $user}}}
                     {overshell update_all}}
                  {$this show_saveloadmgr_not_idle}}
               {$this show_saveloadmgr_not_meta}})
         (dlc_sdmode
            {if
               {&&
                  {session_mgr is_local}
                  {!
                     {ui in_transition}}
                  {==
                     main_hub_screen
                     {ui current_screen}}}
               {do
                  ($isSdMode
                     {==
                        kSDMode
                        {content_mgr get_mode}})
                  {if_else
                     $isSdMode
                     {do
                        {print
                           "* Switching from kSDMode to kNANDMode\n"}
                        {if_else
                           {content_mgr refresh_done}
                           {do
                              {content_mgr set_mode kNANDMode}
                              {content_mgr start_refresh}}
                           {do
                              {push_disable_sdmode_dialog}}}}
                     {do
                        {print
                           "* Switching from kNANDMode to kSDMode\n"}
                        {push_enable_sdmode_dialog}}}}}
            {$this update_sdmode_check})}))
(kState_OptionsAudio
   (view options_audio)
   (on_cancel
      {$this show_options_av_settings})
   (enter
      {options_audio.lst
         set_data
         (overshell_audio_instruments
            overshell_audio_bg_music
            overshell_audio_crowd
            overshell_audio_sfx)}
      {instruments.sld set_num_steps 12}
      {bg_music.sld set_num_steps 12}
      {crowd.sld set_num_steps 12}
      {sfx.sld set_num_steps 12}
      {voice_chat.sld set_num_steps 12})
   (update_view
      {handle
         ($this
            update_slider
            instruments.sld
            "")}
      {handle
         ($this
            update_slider
            bg_music.sld
            "")}
      {handle
         ($this
            update_slider
            crowd.sld
            "")}
      {handle
         ($this
            update_slider
            sfx.sld
            "")}
      {handle
         ($this
            update_slider
            voice_chat.sld
            "")})
   (SELECT_MSG
      {if
         {== $component options_audio.lst}
         {switch
            {$component selected_sym}
            (overshell_audio_instruments
               {instruments.sld store}
               {instruments.sld set_showing TRUE}
               {$this set_focus instruments.sld})
            (overshell_audio_bg_music
               {bg_music.sld store}
               {bg_music.sld set_showing TRUE}
               {$this set_focus bg_music.sld})
            (overshell_audio_crowd
               {crowd.sld store}
               {crowd.sld set_showing TRUE}
               {$this set_focus crowd.sld})
            (overshell_audio_sfx
               {sfx.sld store}
               {sfx.sld set_showing TRUE}
               {$this set_focus sfx.sld})
            (overshell_audio_voice_chat
               {voice_chat.sld store}
               {voice_chat.sld set_showing TRUE}
               {$this set_focus voice_chat.sld})}})
   (BUTTON_DOWN_MSG
      {if_else
         {find_elem
            ("instruments.sld"
               "bg_music.sld"
               "crowd.sld"
               "sfx.sld"
               "voice_chat.sld")
            {$this focus_name}}
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {{$this
                     find
                     {$this focus_name}}
                  confirm}
               {{$this
                     find
                     {$this focus_name}}
                  set_showing
                  FALSE}
               {$this set_focus options_audio.lst})
            kDataUnhandled}
         kDataUnhandled})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user}))
(kState_OptionsVocal
   (view options_vocal)
   (on_cancel
      {$this show_game_options})
   (enter
      {vocal_track.sld set_num_steps 12}
      {vocal_sens1.sld set_num_steps 12}
      {vocal_sens2.sld set_num_steps 12}
      {vocal_sens3.sld set_num_steps 12})
   (update_view
      {do
         ($options
            {{$this get_user}
               get_gameplay_options})
         ($can_change_synapse
            {$this can_change_synapse_option})
         {handle
            ($this
               update_synapse_check
               {profile_mgr get_synapse_enabled})}
         {handle
            ($this
               update_static_check
               {==
                  {$options get_vocal_style}
                  kVocalStyleStatic})}
         {handle
            ($this
               update_slider
               vocal_track.sld
               "")}
         {handle
            ($this
               update_slider
               vocal_sens1.sld
               "")}
         {handle
            ($this
               update_slider
               vocal_sens2.sld
               "")}
         {handle
            ($this
               update_slider
               vocal_sens3.sld
               "")}
         {handle
            ($this set_can_change_synapse $can_change_synapse)}})
   (SELECT_MSG
      {if
         {== $component options_vocal.lst}
         {switch
            {$component selected_sym}
            (overshell_vocals_mode_static
               {do
                  ($options
                     {{$this get_user}
                        get_gameplay_options})
                  {$options
                     set_vocal_style
                     {if_else
                        {==
                           {$options get_vocal_style}
                           kVocalStyleStatic}
                        kVocalStyleScrolling
                        kVocalStyleStatic}}}
               {if
                  {$user player}
                  {{$user player}
                     update_vocal_style}}
               {$this update})
            (overshell_synapse
               {profile_mgr
                  set_synapse_enabled
                  {!
                     {profile_mgr get_synapse_enabled}}}
               {$this update})
            (overshell_vocal_track_vol
               {vocal_track.sld store}
               {vocal_track.sld set_showing TRUE}
               {$this set_focus vocal_track.sld})
            (mic_1_gain
               {vocal_sens1.sld store}
               {vocal_sens1.sld set_showing TRUE}
               {$this set_focus vocal_sens1.sld})
            (mic_2_gain
               {vocal_sens2.sld store}
               {vocal_sens2.sld set_showing TRUE}
               {$this set_focus vocal_sens2.sld})
            (mic_3_gain
               {vocal_sens3.sld store}
               {vocal_sens3.sld set_showing TRUE}
               {$this set_focus vocal_sens3.sld})}})
   (BUTTON_DOWN_MSG
      {if_else
         {find_elem
            ("vocal_track.sld"
               "vocal_sens1.sld"
               "vocal_sens2.sld"
               "vocal_sens3.sld")
            {$this focus_name}}
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {{$this
                     find
                     {$this focus_name}}
                  confirm}
               {{$this
                     find
                     {$this focus_name}}
                  set_showing
                  FALSE}
               {$this set_focus options_vocal.lst})
            kDataUnhandled}
         kDataUnhandled})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user}))
(kState_OptionsWiiSpeak
   (view options_wiispeak)
   (on_cancel
      {$this show_game_options})
   (update_view
      {do
         ($options
            {{$this get_user}
               get_gameplay_options})
         {handle
            ($this
               update_slider
               MicrophoneSensitivity.sld
               "")}
         {handle
            ($this
               update_slider
               FriendsVolume.sld
               "")}
         {handle
            ($this
               update_toggle_wiispeak_check
               {profile_mgr get_wiispeak_toggle})}
         {handle
            ($this
               update_wiispeak_headphone_mode_check
               {profile_mgr get_wiispeak_headphone_mode})}})
   (enter
      {MicrophoneSensitivity.sld set_num_steps 4}
      {platform_mgr set_party_mic_options_showing 1}
      {if
         {{$this get_user}
            is_local}
         {{ui get_wiispeak_icon_panel}
            show_warning_messages}})
   (exit
      {platform_mgr set_party_mic_options_showing 0})
   (SELECT_MSG
      {if
         {== $component options_wiispeak.lst}
         {switch
            {$component selected_sym}
            (wiispeak_button_toggle_wiispeak
               {profile_mgr
                  set_wiispeak_toggle
                  {!
                     {profile_mgr get_wiispeak_toggle}}}
               {$this update}
               {saveload_mgr autosave})
            (wiispeak_button_headphone_mode
               {profile_mgr
                  set_wiispeak_headphone_mode
                  {!
                     {profile_mgr get_wiispeak_headphone_mode}}}
               {$this update}
               {do
                  {HeadphoneMode.chk
                     set
                     checked
                     {profile_mgr get_wiispeak_headphone_mode}}
                  {{ui get_wiispeak_icon_panel}
                     refresh_headphone_mode}}
               {saveload_mgr autosave})
            (wiispeak_button_friends_volume
               {FriendsVolume.sld store}
               {FriendsVolume.sld set_showing TRUE}
               {$this set_focus FriendsVolume.sld})
            (wiispeak_button_microphone_sensitivity
               {MicrophoneSensitivity.sld store}
               {MicrophoneSensitivity.sld set_showing TRUE}
               {$this set_focus MicrophoneSensitivity.sld})}})
   (BUTTON_DOWN_MSG
      {if_else
         {find_elem
            ("FriendsVolume.sld"
               "MicrophoneSensitivity.sld")
            {$this focus_name}}
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {{$this
                     find
                     {$this focus_name}}
                  confirm}
               {{$this
                     find
                     {$this focus_name}}
                  set_showing
                  FALSE}
               {$this set_focus options_wiispeak.lst}
               {saveload_mgr autosave})
            kDataUnhandled}
         kDataUnhandled})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user}))
(kState_OptionsExtras
   (view options_extras)
      (enter
         {options_extras.lst
            set_data
               (overshell_freecam
			    overshell_postproc
			    overshell_credits
                overshell_linking_code
                #ifdef HX_XBOX
                overshell_audition
                #endif)})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_credits
            {$this show_enter_credits})
         (overshell_linking_code
            {if_else
               {&&
                  {$user can_save_data}
                  {$user is_signed_in_online}
                  #ifdef HX_WII
                  {server is_connected}
                  #endif}
               {$this show_linking_code}
               {$this show_linking_code_error}})})
   (on_cancel
      {$this show_game_options}))
(kState_LinkingCode
   (view linking_code)
   (success FALSE)
   (waiting TRUE)
   (code
      "")
   (update_view
      {do
         ($profile
            {profile_mgr
               get_profile
               {$this get_user}})
         {if
            $profile
            {$this
               update_linking_code
               {{$this get_state}
                  get
                  waiting}
               {{$this get_state}
                  get
                  success}
               {{$this get_state}
                  get
                  code}
               $profile}}})
   (enter
      {$this fetch_linking_code})
   (BUTTON_DOWN_MSG
      {if_else
         {&&
            {== $action kAction_Confirm}
            {!
               {{$this get_state}
                  get
                  waiting}}}
         {$this show_options_extras}
         kDataUnhandled})
   (on_cancel
      {$this cancel_linking_code}
      {$this show_options_extras}))
(kState_LinkingCodeError
   (view confirm_action)
   (enter
      {if_else
         {{$this get_user}
            can_save_data}
         {handle
            ($this set_confirm_message linking_code_connect_error)}
         {handle
            ($this set_confirm_message linking_code_signin_error)}})
   (SELECT_MSG
      {$this show_options_extras}))
(kState_RB3EScreensaver
 (view options_end_game)
 (enter
  {options_end_game.lst
   set_data
   ("ON"
    "OFF")})
 (SELECT_MSG
  {switch
   {$component selected_sym}
   ("ON"
   {set $screensaver FALSE}
   {unless
   {$this in_song}
    {ui goto_screen meta_loading_main_screen}})
   ("OFF"
   {set $screensaver TRUE}
   {unless
   {$this in_song}
    {ui goto_screen meta_loading_main_screen}})
   })
 (on_cancel
  {$this show_state kState_RB3ESettings}))
(kState_RB3EDrumColorSelector
 (view options_extras)
 (enter
  {options_extras.lst
   set_data
   ("Gem Color"
    "Cymbal Color"
    "Smasher Color")})
 (SELECT_MSG
  {switch
   {$component selected_sym}
   ("Gem Color"
    {$this show_state kState_RB3EDrumGemColorSelector})
   ("Cymbal Color"
    {$this show_state kState_RB3ECymbalColorSelector})
   ("Smasher Color"
    {$this show_state kState_RB3ESmasherColorSelector})})
 (on_cancel
  {$this show_state kState_RB3ESettings}))
(kState_RB3ECymbalColorSelector
 (view options_audio)
 (enter
  {set $cymsliders TRUE}
  {instruments.sld set_num_steps 5}
  {bg_music.sld set_num_steps 5}
  {crowd.sld set_num_steps 5}
  {sfx.sld set_num_steps 5}
  {instruments.sld set_current $cym2_color}
  {bg_music.sld set_current $cym3_color}
  {crowd.sld set_current $cym4_color}
  {sfx.sld set_current $cym1_color}
  {options_audio.lst
   set_data
   ("Cymbal 1"
    "Cymbal 2"
    "Cymbal 3"
    "Cymbal 3 (Lefty)")})
 (SELECT_MSG
  {switch
   {$component selected_sym}
   ("Cymbal 1"
    {set $drumsld1 TRUE}
    {set $drumslds TRUE}
    {instruments.sld store}
    {instruments.sld set_showing TRUE}
    {$this set_focus instruments.sld})
   ("Cymbal 2"
    {set $drumsld2 TRUE}
    {set $drumslds TRUE}
    {bg_music.sld store}
    {bg_music.sld set_showing TRUE}
    {$this set_focus bg_music.sld})
   ("Cymbal 3"
    {set $drumsld3 TRUE}
    {set $drumslds TRUE}
    {crowd.sld store}
    {crowd.sld set_showing TRUE}
    {$this set_focus crowd.sld})
   ("Cymbal 3 (Lefty)"
    {set $drumsld4 TRUE}
    {set $drumslds TRUE}
    {sfx.sld store}
    {sfx.sld set_showing TRUE}
    {$this set_focus sfx.sld})})
 (BUTTON_DOWN_MSG
      {if_else
         {find_elem
            ("instruments.sld"
               "bg_music.sld"
               "crowd.sld"
               "sfx.sld")
            {$this focus_name}}
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {{$this
                     find
                     {$this focus_name}}
                  confirm}
               {{$this
                     find
                     {$this focus_name}}
                  set_showing
                  FALSE}
               {if_else $drumslds
               {do {$this show_state kState_RB3ECymMsg} {$this set_focus confirm_action.lst}}
               {$this set_focus options_audio.lst}})
            kDataUnhandled}
         kDataUnhandled})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user})
 (exit
  {set $cymsliders FALSE})
 (on_cancel
  {$this show_state kState_RB3EDrumColorSelector}))
(kState_RB3ECymMsg
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message 
            {if_else $drumsld1 {do
               {if_else {== {int $cym2_color} 0} os_cym2
               {if_else {== {int $cym2_color} 1} os_cym3
               {if_else {== {int $cym2_color} 2} os_cym4
               {if_else {== {int $cym2_color} 3} os_cym1
               os_cym5}}}}}
            {if_else $drumsld2 {do
               {if_else {== {int $cym3_color} 0} os_cym2
               {if_else {== {int $cym3_color} 1} os_cym3
               {if_else {== {int $cym3_color} 2} os_cym4
               {if_else {== {int $cym3_color} 3} os_cym1
               os_cym5}}}}}
            {if_else $drumsld3 {do
               {if_else {== {int $cym4_color} 0} os_cym2
               {if_else {== {int $cym4_color} 1} os_cym3
               {if_else {== {int $cym4_color} 2} os_cym4
               {if_else {== {int $cym4_color} 3} os_cym1
               os_cym5}}}}}
            {do
               {if_else {== {int $cym1_color} 0} os_cym2
               {if_else {== {int $cym1_color} 1} os_cym3
               {if_else {== {int $cym1_color} 2} os_cym4
               {if_else {== {int $cym1_color} 3} os_cym1
               os_cym5}}}}}}}})})
   (SELECT_MSG
      {set $drumsld1 FALSE}
      {set $drumsld2 FALSE}
      {set $drumsld3 FALSE}
      {set $drumsld4 FALSE}
      {set $drumslds FALSE}
      {$this show_state kState_RB3ECymbalColorSelector}))
(kState_RB3EDrumGemColorSelector
 (view options_audio)
 (enter
  {set $drumgemsliders TRUE}
  {instruments.sld set_num_steps 5}
  {bg_music.sld set_num_steps 5}
  {crowd.sld set_num_steps 5}
  {sfx.sld set_num_steps 5}
  {voice_chat.sld set_num_steps 2}
  {instruments.sld set_current $drum1_color}
  {bg_music.sld set_current $drum2_color}
  {crowd.sld set_current $drum3_color}
  {sfx.sld set_current $drum4_color}
  {voice_chat.sld set_current $kick_color}
  {options_audio.lst
   set_data
   ("Gem 1"
    "Gem 2"
    "Gem 3"
    "Gem 4"
    "Kick")})
 (SELECT_MSG
  {switch
   {$component selected_sym}
   ("Gem 1"
    {set $drumsld1 TRUE}
    {set $drumslds TRUE}
    {instruments.sld store}
    {instruments.sld set_showing TRUE}
    {$this set_focus instruments.sld})
   ("Gem 2"
    {set $drumsld2 TRUE}
    {set $drumslds TRUE}
    {bg_music.sld store}
    {bg_music.sld set_showing TRUE}
    {$this set_focus bg_music.sld})
   ("Gem 3"
    {set $drumsld3 TRUE}
    {set $drumslds TRUE}
    {crowd.sld store}
    {crowd.sld set_showing TRUE}
    {$this set_focus crowd.sld})
   ("Gem 4"
    {set $drumsld4 TRUE}
    {set $drumslds TRUE}
    {sfx.sld store}
    {sfx.sld set_showing TRUE}
    {$this set_focus sfx.sld})
   ("Kick"
    {set $drumsld5 TRUE}
    {set $drumslds TRUE}
    {voice_chat.sld store}
    {voice_chat.sld set_showing TRUE}
    {$this set_focus voice_chat.sld})})
 (BUTTON_DOWN_MSG
      {if_else
         {find_elem
            ("instruments.sld"
               "bg_music.sld"
               "crowd.sld"
               "sfx.sld"
               "voice_chat.sld")
            {$this focus_name}}
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {{$this
                     find
                     {$this focus_name}}
                  confirm}
               {{$this
                     find
                     {$this focus_name}}
                  set_showing
                  FALSE}
               {if_else $drumslds
               {do {$this show_state kState_RB3EDrumGemMsg} {$this set_focus confirm_action.lst}}
               {$this set_focus options_audio.lst}})
            kDataUnhandled}
         kDataUnhandled})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user})
 (exit
  {set $drumgemsliders FALSE})
 (on_cancel
  {$this show_state kState_RB3EDrumColorSelector}))
(kState_RB3EDrumGemMsg
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message 
            {if_else $drumsld1 {do
               {if_else {== {int $drum1_color} 0} os_gem2
               {if_else {== {int $drum1_color} 1} os_gem3
               {if_else {== {int $drum1_color} 2} os_gem4
               {if_else {== {int $drum1_color} 3} os_gem1
               os_gem6}}}}}
            {if_else $drumsld2 {do
               {if_else {== {int $drum2_color} 0} os_gem2
               {if_else {== {int $drum2_color} 1} os_gem3
               {if_else {== {int $drum2_color} 2} os_gem4
               {if_else {== {int $drum2_color} 3} os_gem1
               os_gem6}}}}}
            {if_else $drumsld3 {do
               {if_else {== {int $drum3_color} 0} os_gem2
               {if_else {== {int $drum3_color} 1} os_gem3
               {if_else {== {int $drum3_color} 2} os_gem4
               {if_else {== {int $drum3_color} 3} os_gem1
               os_gem6}}}}}
            {if_else $drumsld4 {do
               {if_else {== {int $drum4_color} 0} os_gem2
               {if_else {== {int $drum4_color} 1} os_gem3
               {if_else {== {int $drum4_color} 2} os_gem4
               {if_else {== {int $drum4_color} 3} os_gem1
               os_gem6}}}}}
            {do
               {if_else {== {int $kick_color} 0} os_kick1
               os_kick2}}}}}})})
   (SELECT_MSG
      {set $drumsld1 FALSE}
      {set $drumsld2 FALSE}
      {set $drumsld3 FALSE}
      {set $drumsld4 FALSE}
      {set $drumsld5 FALSE}
      {set $drumslds FALSE}
      {$this show_state kState_RB3EDrumGemColorSelector}))
(kState_RB3ESmasherColorSelector
 (view options_audio)
 (enter
  {set $smashersliders TRUE}
  {instruments.sld set_num_steps 4}
  {bg_music.sld set_num_steps 4}
  {crowd.sld set_num_steps 4}
  {sfx.sld set_num_steps 4}
  {instruments.sld set_current $smasher1_color}
  {bg_music.sld set_current $smasher2_color}
  {crowd.sld set_current $smasher3_color}
  {sfx.sld set_current $smasher4_color}
  {options_audio.lst
   set_data
   ("Smasher 1"
    "Smasher 2"
    "Smasher 3"
    "Smasher 4")})
 (SELECT_MSG
  {switch
   {$component selected_sym}
   ("Smasher 1"
    {set $drumsld1 TRUE}
    {set $drumslds TRUE}
    {instruments.sld store}
    {instruments.sld set_showing TRUE}
    {$this set_focus instruments.sld})
   ("Smasher 2"
    {set $drumsld2 TRUE}
    {set $drumslds TRUE}
    {bg_music.sld store}
    {bg_music.sld set_showing TRUE}
    {$this set_focus bg_music.sld})
   ("Smasher 3"
    {set $drumsld3 TRUE}
    {set $drumslds TRUE}
    {crowd.sld store}
    {crowd.sld set_showing TRUE}
    {$this set_focus crowd.sld})
   ("Smasher 4"
    {set $drumsld4 TRUE}
    {set $drumslds TRUE}
    {sfx.sld store}
    {sfx.sld set_showing TRUE}
    {$this set_focus sfx.sld})})
 (BUTTON_DOWN_MSG
      {if_else
         {find_elem
            ("instruments.sld"
               "bg_music.sld"
               "crowd.sld"
               "sfx.sld")
            {$this focus_name}}
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {{$this
                     find
                     {$this focus_name}}
                  confirm}
               {{$this
                     find
                     {$this focus_name}}
                  set_showing
                  FALSE}
               {if_else $drumslds
               {do {$this show_state kState_RB3ESmasherMsg} {$this set_focus confirm_action.lst}}
               {$this set_focus options_audio.lst}})
            kDataUnhandled}
         kDataUnhandled})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user})
 (exit
   {set $smashersliders FALSE})
 (on_cancel
  {$this show_state kState_RB3EDrumColorSelector}))
(kState_RB3ESmasherMsg
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message 
            {if_else $drumsld1 {do
               {if_else {== {int $smasher1_color} 0} os_smasher2
               {if_else {== {int $smasher1_color} 1} os_smasher3
               {if_else {== {int $smasher1_color} 2} os_smasher4
               os_smasher1}}}}
            {if_else $drumsld2 {do
               {if_else {== {int $smasher2_color} 0} os_smasher2
               {if_else {== {int $smasher2_color} 1} os_smasher3
               {if_else {== {int $smasher2_color} 2} os_smasher4
               os_smasher1}}}}
            {if_else $drumsld3 {do
               {if_else {== {int $smasher3_color} 0} os_smasher2
               {if_else {== {int $smasher3_color} 1} os_smasher3
               {if_else {== {int $smasher3_color} 2} os_smasher4
               os_smasher1}}}}
            {do
               {if_else {== {int $smasher4_color} 0} os_smasher2
               {if_else {== {int $smasher4_color} 1} os_smasher3
               {if_else {== {int $smasher4_color} 2} os_smasher4
               os_smasher1}}}}}}})})
   (SELECT_MSG
      {set $drumsld1 FALSE}
      {set $drumsld2 FALSE}
      {set $drumsld3 FALSE}
      {set $drumsld4 FALSE}
      {set $drumslds FALSE}
      {$this show_state kState_RB3ESmasherColorSelector}))
(kState_RB3EColorSelector
 (view options_extras)
 (enter
  {options_extras.lst
   set_data
   ("Gem Color"
    "Fret Color"
    "Sustain Color")})
 (SELECT_MSG
  {switch
   {$component selected_sym}
   ("Gem Color"
    {$this show_state kState_RB3EGemColorSelector})
   ("Fret Color"
    {$this show_state kState_RB3EFretColorSelector})
   ("Sustain Color"
    {$this show_state kState_RB3ESusColorSelector})})
 (on_cancel
  {$this show_state kState_RB3ESettings}))
(kState_RB3EGemColorSelector
 (view options_audio)
 (enter
  {set $gemsliders TRUE}
  {instruments.sld set_num_steps 6}
  {bg_music.sld set_num_steps 6}
  {crowd.sld set_num_steps 6}
  {sfx.sld set_num_steps 6}
  {voice_chat.sld set_num_steps 6}
  {instruments.sld set_current $slot1_color}
  {bg_music.sld set_current $slot2_color}
  {crowd.sld set_current $slot3_color}
  {sfx.sld set_current $slot4_color}
  {voice_chat.sld set_current $slot5_color}
  {options_audio.lst
   set_data
   ("Gem 1"
    "Gem 2"
    "Gem 3"
    "Gem 4"
    "Gem 5")})
 (SELECT_MSG
  {switch
   {$component selected_sym}
   ("Gem 1"
    {set $sld1 TRUE}
    {set $slds TRUE}
    {instruments.sld store}
    {instruments.sld set_showing TRUE}
    {$this set_focus instruments.sld})
   ("Gem 2"
    {set $sld2 TRUE}
    {set $slds TRUE}
    {bg_music.sld store}
    {bg_music.sld set_showing TRUE}
    {$this set_focus bg_music.sld})
   ("Gem 3"
    {set $sld3 TRUE}
    {set $slds TRUE}
    {crowd.sld store}
    {crowd.sld set_showing TRUE}
    {$this set_focus crowd.sld})
   ("Gem 4"
    {set $sld4 TRUE}
    {set $slds TRUE}
    {sfx.sld store}
    {sfx.sld set_showing TRUE}
    {$this set_focus sfx.sld})
   ("Gem 5"
    {set $sld5 TRUE}
    {set $slds TRUE}
    {voice_chat.sld store}
    {voice_chat.sld set_showing TRUE}
    {$this set_focus voice_chat.sld})})
 (BUTTON_DOWN_MSG
      {if_else
         {find_elem
            ("instruments.sld"
               "bg_music.sld"
               "crowd.sld"
               "sfx.sld"
               "voice_chat.sld")
            {$this focus_name}}
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {{$this
                     find
                     {$this focus_name}}
                  confirm}
               {{$this
                     find
                     {$this focus_name}}
                  set_showing
                  FALSE}
               {if_else $slds
               {do {$this show_state kState_RB3EGemMsg} {$this set_focus confirm_action.lst}}
               {$this set_focus options_audio.lst}})
            kDataUnhandled}
         kDataUnhandled})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user})
 (exit
  {set $gemsliders FALSE})
 (on_cancel
  {$this show_state kState_RB3EColorSelector}))
(kState_RB3EGemMsg
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message 
            {if_else $sld1 {do
               {if_else {== {int $slot1_color} 0} os_gem1
               {if_else {== {int $slot1_color} 1} os_gem2
               {if_else {== {int $slot1_color} 2} os_gem3
               {if_else {== {int $slot1_color} 3} os_gem4
               {if_else {== {int $slot1_color} 4} os_gem5
               os_gem6}}}}}}
            {if_else $sld2 {do
               {if_else {== {int $slot2_color} 0} os_gem1
               {if_else {== {int $slot2_color} 1} os_gem2
               {if_else {== {int $slot2_color} 2} os_gem3
               {if_else {== {int $slot2_color} 3} os_gem4
               {if_else {== {int $slot2_color} 4} os_gem5
               os_gem6}}}}}}
            {if_else $sld3 {do
               {if_else {== {int $slot3_color} 0} os_gem1
               {if_else {== {int $slot3_color} 1} os_gem2
               {if_else {== {int $slot3_color} 2} os_gem3
               {if_else {== {int $slot3_color} 3} os_gem4
               {if_else {== {int $slot3_color} 4} os_gem5
               os_gem6}}}}}}
            {if_else $sld4 {do
               {if_else {== {int $slot4_color} 0} os_gem1
               {if_else {== {int $slot4_color} 1} os_gem2
               {if_else {== {int $slot4_color} 2} os_gem3
               {if_else {== {int $slot4_color} 3} os_gem4
               {if_else {== {int $slot4_color} 4} os_gem5
               os_gem6}}}}}}
            {do
               {if_else {== {int $slot5_color} 0} os_gem1
               {if_else {== {int $slot5_color} 1} os_gem2
               {if_else {== {int $slot5_color} 2} os_gem3
               {if_else {== {int $slot5_color} 3} os_gem4
               {if_else {== {int $slot5_color} 4} os_gem5
               os_gem6}}}}}}}}}})})
   (SELECT_MSG
      {set $sld1 FALSE}
      {set $sld2 FALSE}
      {set $sld3 FALSE}
      {set $sld4 FALSE}
      {set $sld5 FALSE}
      {set $slds FALSE}
      {$this show_state kState_RB3EGemColorSelector}))
(kState_RB3EFretColorSelector
 (view options_audio)
 (enter
  {set $fretsliders TRUE}
  {instruments.sld set_num_steps 5}
  {bg_music.sld set_num_steps 5}
  {crowd.sld set_num_steps 5}
  {sfx.sld set_num_steps 5}
  {voice_chat.sld set_num_steps 5}
  {instruments.sld set_current $fret1_color}
  {bg_music.sld set_current $fret2_color}
  {crowd.sld set_current $fret3_color}
  {sfx.sld set_current $fret4_color}
  {voice_chat.sld set_current $fret5_color}
  {options_audio.lst
   set_data
   ("Fret 1"
    "Fret 2"
    "Fret 3"
    "Fret 4"
    "Fret 5")})
 (SELECT_MSG
  {switch
   {$component selected_sym}
   ("Fret 1"
    {set $sld1 TRUE}
    {set $slds TRUE}
    {instruments.sld store}
    {instruments.sld set_showing TRUE}
    {$this set_focus instruments.sld})
   ("Fret 2"
    {set $sld2 TRUE}
    {set $slds TRUE}
    {bg_music.sld store}
    {bg_music.sld set_showing TRUE}
    {$this set_focus bg_music.sld})
   ("Fret 3"
    {set $sld3 TRUE}
    {set $slds TRUE}
    {crowd.sld store}
    {crowd.sld set_showing TRUE}
    {$this set_focus crowd.sld})
   ("Fret 4"
    {set $sld4 TRUE}
    {set $slds TRUE}
    {sfx.sld store}
    {sfx.sld set_showing TRUE}
    {$this set_focus sfx.sld})
   ("Fret 5"
    {set $sld5 TRUE}
    {set $slds TRUE}
    {voice_chat.sld store}
    {voice_chat.sld set_showing TRUE}
    {$this set_focus voice_chat.sld})})
 (BUTTON_DOWN_MSG
      {if_else
         {find_elem
            ("instruments.sld"
               "bg_music.sld"
               "crowd.sld"
               "sfx.sld"
               "voice_chat.sld")
            {$this focus_name}}
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {{$this
                     find
                     {$this focus_name}}
                  confirm}
               {{$this
                     find
                     {$this focus_name}}
                  set_showing
                  FALSE}
               {if_else $slds
               {do {$this show_state kState_RB3EFretMsg} {$this set_focus confirm_action.lst}}
               {$this set_focus options_audio.lst}})
            kDataUnhandled}
         kDataUnhandled})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user})
 (exit
   {set $fretsliders FALSE})
 (on_cancel
  {$this show_state kState_RB3EColorSelector}))
(kState_RB3EFretMsg
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message 
            {if_else $sld1 {do
               {if_else {== {int $fret1_color} 0} os_fret1
               {if_else {== {int $fret1_color} 1} os_fret2
               {if_else {== {int $fret1_color} 2} os_fret3
               {if_else {== {int $fret1_color} 3} os_fret4
               os_fret5}}}}}
            {if_else $sld2 {do
               {if_else {== {int $fret2_color} 0} os_fret1
               {if_else {== {int $fret2_color} 1} os_fret2
               {if_else {== {int $fret2_color} 2} os_fret3
               {if_else {== {int $fret2_color} 3} os_fret4
               os_fret5}}}}}
            {if_else $sld3 {do
               {if_else {== {int $fret3_color} 0} os_fret1
               {if_else {== {int $fret3_color} 1} os_fret2
               {if_else {== {int $fret3_color} 2} os_fret3
               {if_else {== {int $fret3_color} 3} os_fret4
               os_fret5}}}}}
            {if_else $sld4 {do
               {if_else {== {int $fret4_color} 0} os_fret1
               {if_else {== {int $fret4_color} 1} os_fret2
               {if_else {== {int $fret4_color} 2} os_fret3
               {if_else {== {int $fret4_color} 3} os_fret4
               os_fret5}}}}}
            {do
               {if_else {== {int $fret5_color} 0} os_fret1
               {if_else {== {int $fret5_color} 1} os_fret2
               {if_else {== {int $fret5_color} 2} os_fret3
               {if_else {== {int $fret5_color} 3} os_fret4
               os_fret5}}}}}}}}})})
   (SELECT_MSG
      {set $sld1 FALSE}
      {set $sld2 FALSE}
      {set $sld3 FALSE}
      {set $sld4 FALSE}
      {set $sld5 FALSE}
      {set $slds FALSE}
      {$this show_state kState_RB3EFretColorSelector}))
(kState_RB3ESusColorSelector
 (view options_audio)
 (enter
  {set $sussliders TRUE}
  {instruments.sld set_num_steps 5}
  {bg_music.sld set_num_steps 5}
  {crowd.sld set_num_steps 5}
  {sfx.sld set_num_steps 5}
  {voice_chat.sld set_num_steps 5}
  {instruments.sld set_current $sus1_color}
  {bg_music.sld set_current $sus2_color}
  {crowd.sld set_current $sus3_color}
  {sfx.sld set_current $sus4_color}
  {voice_chat.sld set_current $sus5_color}
  {options_audio.lst
   set_data
   ("Sustain 1"
    "Sustain 2"
    "Sustain 3"
    "Sustain 4"
    "Sustain 5")})
 (SELECT_MSG
  {switch
   {$component selected_sym}
   ("Sustain 1"
    {set $sld1 TRUE}
    {set $slds TRUE}
    {instruments.sld store}
    {instruments.sld set_showing TRUE}
    {$this set_focus instruments.sld})
   ("Sustain 2"
    {set $sld2 TRUE}
    {set $slds TRUE}
    {bg_music.sld store}
    {bg_music.sld set_showing TRUE}
    {$this set_focus bg_music.sld})
   ("Sustain 3"
    {set $sld3 TRUE}
    {set $slds TRUE}
    {crowd.sld store}
    {crowd.sld set_showing TRUE}
    {$this set_focus crowd.sld})
   ("Sustain 4"
    {set $sld4 TRUE}
    {set $slds TRUE}
    {sfx.sld store}
    {sfx.sld set_showing TRUE}
    {$this set_focus sfx.sld})
   ("Sustain 5"
    {set $sld5 TRUE}
    {set $slds TRUE}
    {voice_chat.sld store}
    {voice_chat.sld set_showing TRUE}
    {$this set_focus voice_chat.sld})})
 (BUTTON_DOWN_MSG
      {if_else
         {find_elem
            ("instruments.sld"
               "bg_music.sld"
               "crowd.sld"
               "sfx.sld"
               "voice_chat.sld")
            {$this focus_name}}
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {{$this
                     find
                     {$this focus_name}}
                  confirm}
               {{$this
                     find
                     {$this focus_name}}
                  set_showing
                  FALSE}
               {if_else $slds
               {do {$this show_state kState_RB3ESusMsg} {$this set_focus confirm_action.lst}}
               {$this set_focus options_audio.lst}})
            kDataUnhandled}
         kDataUnhandled})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user})
 (exit
   {set $sussliders FALSE})
 (on_cancel
  {$this show_state kState_RB3EColorSelector}))
(kState_RB3ESusMsg
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message 
            {if_else $sld1 {do
               {if_else {== {int $sus1_color} 0} os_sus1
               {if_else {== {int $sus1_color} 1} os_sus2
               {if_else {== {int $sus1_color} 2} os_sus3
               {if_else {== {int $sus1_color} 3} os_sus4
               os_sus5}}}}}
            {if_else $sld2 {do
               {if_else {== {int $sus2_color} 0} os_sus1
               {if_else {== {int $sus2_color} 1} os_sus2
               {if_else {== {int $sus2_color} 2} os_sus3
               {if_else {== {int $sus2_color} 3} os_sus4
               os_sus5}}}}}
            {if_else $sld3 {do
               {if_else {== {int $sus3_color} 0} os_sus1
               {if_else {== {int $sus3_color} 1} os_sus2
               {if_else {== {int $sus3_color} 2} os_sus3
               {if_else {== {int $sus3_color} 3} os_sus4
               os_sus5}}}}}
            {if_else $sld4 {do
               {if_else {== {int $sus4_color} 0} os_sus1
               {if_else {== {int $sus4_color} 1} os_sus2
               {if_else {== {int $sus4_color} 2} os_sus3
               {if_else {== {int $sus4_color} 3} os_sus4
               os_sus5}}}}}
            {do
               {if_else {== {int $sus5_color} 0} os_sus1
               {if_else {== {int $sus5_color} 1} os_sus2
               {if_else {== {int $sus5_color} 2} os_sus3
               {if_else {== {int $sus5_color} 3} os_sus4
               os_sus5}}}}}}}}})})
   (SELECT_MSG
      {set $sld1 FALSE}
      {set $sld2 FALSE}
      {set $sld3 FALSE}
      {set $sld4 FALSE}
      {set $sld5 FALSE}
      {set $slds FALSE}
      {$this show_state kState_RB3ESusColorSelector}))
(kState_RB3ESettings
 (view options_audio)
 (enter
  {set $rb3eslider TRUE}
  {instruments.sld set_num_steps 60} ;number of steps for venue fps slider
  {bg_music.sld set_num_steps 41} ;number of steps for note speed slider
  {crowd.sld set_num_steps 31} ;number of steps for song speed slider
  {instruments.sld set_current {int {- $emulatefps 1}}} ;set FPS slider based on current value
  {bg_music.sld set_current {int {+ 0.5 {/ {+ {- $trackspeed 1} 0.5} 0.05}}}} ;set note speed slider based on current value
  {crowd.sld set_current {int {+ 0.5 {/ {- $speedmod 1} 0.05}}}} ;set song speed slider based on current value
  {trackspeed_msg set_token_fmt {sprintf {localize trackspeed_msg} {int {+ 0.5 {* $trackspeed 100}}}}} ;set note speed msg (or not, thanks rb3)
  {speed_msg.lbl set_token_fmt {sprintf {localize speed_msg} {int {+ 0.5 {* $speedmod 100}}}}} ;set song speed msg (or not, thanks rb3)
  {fps_msg set_token_fmt {sprintf {localize fps_msg} {int $emulatefps}}} ;set venue fps msg (or not, thanks rb3)
  {if_else {== {{$this get_user} get_controller_type} kControllerVocals}
  {options_audio.lst
   set_data
   (
    "Venue FPS"
    "Track Speed"
    "Song Speed"
    "Venue Select"
	"Screensaver")}
  {if_else {== {{$this get_user} get_controller_type} kControllerRealGuitar}
  {options_audio.lst
   set_data
   (
    "Venue FPS"
    "Track Speed"
    "Song Speed"
    "Venue Select"
   "Screensaver")}
  {options_audio.lst
   set_data
   (
    "Venue FPS"
    "Track Speed"
    "Song Speed"
    "Venue Select"
    "Set Colors"
   "Screensaver")}}})
 (SELECT_MSG
  {switch
   {$component selected_sym}
   ("Venue FPS"
      {set $fpsslider TRUE}
      {instruments.sld store}
      {instruments.sld set_showing TRUE}
      {$this set_focus instruments.sld})
   ("Track Speed"
    {set $trackspeedslider TRUE}
    {bg_music.sld store}
    {bg_music.sld set_showing TRUE}
    {$this set_focus bg_music.sld})
   ("Song Speed"
      {set $songspeedslider TRUE}
      {crowd.sld store}
      {crowd.sld set_showing TRUE}
      {$this set_focus crowd.sld})
   ("Venue Select"
    {$this show_state kState_RB3EVenueSelector})
   ("Fretboard Select"
    {$this show_state kState_RB3EFretboardSelector})
   ("Set Colors"
    {do {set $rb3eslider FALSE} {if_else {== {{$this get_user} get_controller_type} kControllerDrum}
    {$this show_state kState_RB3EDrumColorSelector} {if_else {== {{$this get_user} get_controller_type} kControllerKeys}
    {$this show_state kState_RB3EKeysColorWarning} 
    {$this show_state kState_RB3EColorSelector}}}})
   ("Screensaver"
    {$this show_state kState_RB3EScreensaver})})
(BUTTON_DOWN_MSG
      {if_else
         {find_elem
            ("instruments.sld"
               "bg_music.sld"
               "crowd.sld")
            {$this focus_name}}
         {switch
            $action
            ((kAction_Confirm kAction_Cancel)
               {{$this
                     find
                     {$this focus_name}}
                  confirm}
               {{$this
                     find
                     {$this focus_name}}
                  set_showing
                  FALSE}
               {if_else $fpsslider
                  {do {$this show_state kState_VenueFPSSliderMsg} {$this set_focus confirm_action.lst}}
               {if_else $songspeedslider
                  {do {$this show_state kState_SongSpeedSliderMsg} {$this set_focus confirm_action.lst}}
               {if_else $trackspeedslider
                  {do {$this show_state kState_TrackSpeedSliderMsg} {$this set_focus confirm_action.lst}}
                  {$this set_focus options_audio.lst}}}})
            kDataUnhandled}
         kDataUnhandled})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component $user})
   (SCROLL_MSG
      {$this on_slider_change $component $user})
 (exit 
  {set $rb3eslider FALSE})
 (on_cancel
  {$this show_game_options}))
(kState_VenueFPSSliderMsg
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message {sprintf {localize os_fps} {int $emulatefps}})})
   (SELECT_MSG
      {set $fpsslider FALSE}
      {$this show_state kState_RB3ESettings}))
(kState_SongSpeedSliderMsg
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message {sprintf {localize os_speed} {int {+ 0.5 {* $speedmod 100}}}})})
   (SELECT_MSG
      {set $songspeedslider FALSE}
      {$this show_state kState_RB3ESettings}))
(kState_TrackSpeedSliderMsg
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message {sprintf {localize os_tspeed} {int {+ 0.5 {* $trackspeed 100}}}})})
   (SELECT_MSG
      {set $trackspeedslider FALSE}
      {$this show_state kState_RB3ESettings}))
(kState_RB3EKeysColorWarning
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message os_kColorWarn)})
   (SELECT_MSG
      {$this show_state kState_RB3EColorSelector}))
(kState_RB3EFretboardSelector
 (view choose_char)
 (enter
  {prefab_mgr load_portraits $this}
  {name.lbl set_showing 0}
  {choose_character.tex
   set_bitmap
   "custom_textures/default.bmp"}
  {chars.lst
   set_data
   (default test2 test3)})
 (SELECT_MSG
  {switch
   {$component selected_sym}
   (default
    {watermark_guitar.tex
     set_bitmap
     "custom_textures/default.bmp"})
   (venue_selector
    {$this show_state kState_RB3EVenueSelector})
   (fretboard_selector
    {$this show_state kState_RB3EFretboardSelector})})
 (on_cancel
  {$this show_state kState_RB3ESettings}))
(kState_RB3EVenueSelector
 (view online_options)
 (enter
       {do
         ($venue_array
            {array
               (VENUES VENUES_VIDEO)})
         {insert_elem $venue_array 0 none}
		 {insert_elem $venue_array 1 random}
         {online_options.lst set_data $venue_array}
		 {online_options.lst set circular 1}
         {online_options.lst set_selected 1}
         {$this update_venue_selection}})
   (update_venue_selection
      {options_extras.lst
         set_selected
         {{set $force TRUE} {set $venue {online_options.lst selected_sym}} {ui goto_screen meta_loading_main_screen}}})
   (SELECT_MSG
      {set $force TRUE} {set $venue {online_options.lst selected_sym}} {ui goto_screen meta_loading_main_screen}
      {switch
         {$component selected_sym}
         (random
            {set $force FALSE} {ui goto_screen meta_loading_main_screen})
		 (none
            {set $force TRUE} {set $venue BLACK_VENUE} {ui goto_screen meta_loading_main_screen})}
      {$this show_state kState_RB3ESettings} {ui pop_screen})
  (exit
  {options_extras.lst set circular 0}
  {options_extras.lst set_selected 0})
 (on_cancel
  {$this show_state kState_RB3ESettings}))
(kState_SaveloadManagerNotIdle
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message options_autosave_toggle)})
   (SELECT_MSG
      {$this show_options_av_settings}))
(kState_SaveloadManagerNotMeta
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message options_autosave_not_meta)})
   (SELECT_MSG
      {$this show_options_av_settings}))
(kState_SaveloadManagerAutosaveConfirm
   (view confirm_action)
   (enter
      {handle
         ($this
            set_confirm_actions
            options_autosave_confirm
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {saveload_mgr disable_autosave $user}
            {$this show_options_av_settings})
         (overshell_confirm_no
            {$this show_options_av_settings})})
   (on_cancel
      {$this show_options_av_settings}))
(kState_Modifiers
   (view modifiers)
   (update_view
      {$this update_modifiers_list})
   (exit
      {unless
         {$this in_game}
         {saveload_mgr autosave}})
   (SELECT_MSG
      {do
         ($modifier
            {$component selected_sym})
         {switch
            $modifier
            (modifier_enter_entry_name
               {$this show_modifier_unlock})
            (mod_auto_play
                  {modifier_mgr toggle_modifier_enabled $modifier}
                  {set $autoplay TRUE} {set $gotcha FALSE}
                  {saveload_mgr disable_autosave $user}
                  {overshell update_all}
				  {ui goto_screen meta_loading_main_screen})
            (mod_drum_surface_navigation
               {modifier_mgr toggle_modifier_enabled $modifier}
               {unless
                  {modifier_mgr is_modifier_active mod_drum_surface_navigation}
                  {$this show_modifiers_drum_warning}}
               {overshell update_all})
            {modifier_mgr toggle_modifier_enabled $modifier}
            {if
               {&&
                  {$this in_song}
                  {modifier_mgr is_modifier_delayed_effect $modifier}}
               {$this show_modifier_delayed_effect}}
            {overshell update_all}}})
   (on_cancel
      {$this show_game_options}))
(kState_ModifiersDrumWarning
   (view confirm_action)
   (enter
      {if_else $ingameset
            {handle
               ($this set_confirm_message ingame_warning)}
      {if_else $author
         {do {set $author FALSE}
            {handle
               ($this set_confirm_message author_warning)}}
      {if_else $autoplay
         {do {set $autoplay FALSE}
            {handle
               ($this set_confirm_message autoplay_warning)}}
      {if_else $breakneck
         {do {set $breakneck FALSE}
            {handle
               ($this set_confirm_message breakneck_warning)}}
      {handle
         ($this set_confirm_message disable_drum_surface_navigation_warning)}}}}})
   (SELECT_MSG
      {if_else $ingameset
      {do {set $ingameset FALSE} {$this show_state kState_RB3ESettings}}
      {$this show_modifiers}}))
(kState_ModifierUnlock
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message modifier_enter_msg)})
   (SELECT_MSG
      {$this show_modifiers}))
(kState_ModifierDelayedEffect
   (view confirm_action)
   (update_view
      {handle
         ($this set_confirm_message modifier_delayed_effect)})
   (SELECT_MSG
      {$this show_modifiers})
   (on_cancel
      {$this show_modifiers}))
(kState_AutoVocalsDenial
   (view confirm_action)
   (enter
      {cond
         ({overshell is_non_vocalist_in_vocals_slot}
            {handle
               ($this set_confirm_message overshell_auto_vocals_denial_non_vocalist)})
         ({$this in_game}
            {handle
               ($this set_confirm_message overshell_auto_vocals_denial_in_game)})
         ({&&
               {==
                  {user_mgr get_num_local_participants}
                  1}
               {==
                  {{$this get_user}
                     get_controller_type}
                  kControllerVocals}}
            {handle
               ($this set_confirm_message overshell_auto_vocals_denial_lone_vocalist)})
         {handle
            ($this set_confirm_message overshell_auto_vocals_denial_generic)}})
   (SELECT_MSG
      {$this show_game_options})
   (on_cancel
      {$this show_game_options}))
#define TOGGLE_LEFTY_FLIP_AND_STATIC_VOCALS
(switch
   {{$this get_user}
      get_controller_type}
   (kControllerVocals
      {$this toggle_vocal_style})
   (kControllerKeys TRUE)
   {$this toggle_lefty_flip})
(kState_ChoosePart
   (view
      {switch
         {{$this get_user}
            get_controller_type}
         (kControllerGuitar choose_part_guitar)
         (kControllerRealGuitar choose_part_real_guitar)
         (kControllerVocals choose_part_vocals)
         (kControllerKeys choose_part_keys)
         (kControllerDrum choose_part_drum)
         {fail
            "No choose part view for this controller type"}})
   (song_settings_flow TRUE)
   (part_unresolved TRUE)
   (shows_extended_mic_arrows TRUE)
   (update_remote_feedback
      ($focus_item)
      {choose_part.lst set_selected $focus_item})
   (update_view
      {$this update_part_select_list})
   (enter
      {$this update_part_select_list}
      {if {== {{$this get_user} get_controller_type} kControllerGuitar}
  {choose_part.lst
   set_data
   (overshell_guitar
    overshell_bass
    overshell_keys)}})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_guitar
            {$this select_part kTrackGuitar})
         (overshell_bass
            {$this select_part kTrackBass})
         (overshell_keys
            {$this select_part kTrackKeys})
         (overshell_real_guitar
            {$this select_part kTrackRealGuitar}
            {if
               {gamemode in_mode trainer}
               {gamemode set_mode pro_song_lessons_real_guitar}})
         (overshell_real_bass
            {$this select_part kTrackRealBass}
            {if
               {gamemode in_mode trainer}
               {gamemode set_mode pro_song_lessons_real_bass}})
         (overshell_real_keys
            {$this select_part kTrackRealKeys})
         (overshell_vocal_solo
            {$this select_vocal_part FALSE}
            {if
               {gamemode in_mode practice}
               {practice_panel set uses_harmony FALSE}})
         (overshell_vocal_harmony
            {$this select_vocal_part TRUE}
            {if
               {gamemode in_mode practice}
               {practice_panel set uses_harmony TRUE}})
         (overshell_drums
            {$this select_drum_part FALSE})
         (overshell_drums_pro
            {$this select_drum_part TRUE})})
   (SCROLL_MSG
      {$this update})
   (get_focus_is_harmony
      {if_else
         {$this focus_name}
         {if_else
            {==
               {{$this focus_name}
                  selected_sym}
               overshell_vocal_harmony}
            TRUE
            FALSE}
         FALSE})
   (get_focus_is_prodrums
      {if_else
         {$this focus_name}
         {if_else
            {==
               {{$this focus_name}
                  selected_sym}
               overshell_drums_pro}
            TRUE
            FALSE}
         FALSE})
   (get_focus_track_type
      {if_else
         {$this focus_name}
         {switch
            {{$this focus_name}
               selected_sym}
            (overshell_guitar kTrackGuitar)
            (overshell_bass kTrackBass)
            (overshell_keys kTrackKeys)
            (overshell_real_guitar kTrackRealGuitar)
            (overshell_real_bass kTrackRealBass)
            (overshell_real_keys kTrackRealKeys)
            (overshell_vocal_solo kTrackVocals)
            (overshell_vocal_harmony kTrackVocals)
            (overshell_drums kTrackDrum)
            (overshell_drums_pro kTrackDrum)
            kTrackNone}
         kTrackNone})
   (on_view_modify
      {TOGGLE_LEFTY_FLIP_AND_STATIC_VOCALS})
   (on_cancel
      {$this leave_choose_part}))
(kState_ChoosePartDenial
   (view confirm_action)
   (song_settings_flow TRUE)
   (part_unresolved TRUE)
   (update_view
      {if_else
         {==
            {critical_user_listener get_critical_user}
            {$this get_user}}
         {handle
            ($this set_confirm_message overshell_choose_part_denial)}
         {handle
            ($this set_confirm_message overshell_choose_part_denial_no_part)}})
   (update_remote_feedback
      ($focus_item)
      {confirm_action.lst set_selected $focus_item})
   (SELECT_MSG
      {$this show_song_options})
   (on_cancel
      {$this show_song_options}))
(kState_ChoosePartWarn
   (view confirm_action)
   (song_settings_flow TRUE)
   (part_unresolved TRUE)
   (update_view
      {handle
         ($this
            set_confirm_actions
            overshell_choose_part_warn
            (overshell_confirm_yes overshell_confirm_no))})
   (update_remote_feedback
      ($focus_item)
      {confirm_action.lst set_selected $focus_item})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this show_choose_part_wait})
         (overshell_confirm_no
            {$this leave_choose_part_wait})})
   (on_cancel
      {$this leave_choose_part_wait}))
(kState_NotBattlePartWarn
   (view confirm_action)
   (song_settings_flow TRUE)
   (part_unresolved TRUE)
   (update_view
      {handle
         ($this
            set_confirm_actions
            overshell_not_battle_part_warn
            (overshell_confirm_yes overshell_confirm_no))})
   (update_remote_feedback
      ($focus_item)
      {confirm_action.lst set_selected $focus_item})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this show_choose_part_wait})
         (overshell_confirm_no
            {$this leave_choose_part_wait})})
   (on_cancel
      {$this leave_choose_part_wait}))
(kState_ChoosePartWait
   (view
      {switch
         {{$this get_user}
            get_controller_type}
         (kControllerGuitar choose_part_guitar)
         (kControllerRealGuitar choose_part_real_guitar)
         (kControllerVocals choose_part_vocals)
         (kControllerKeys choose_part_keys)
         (kControllerDrum choose_part_drum)
         {fail
            "No choose part view for this controller type"}})
   (song_settings_flow TRUE)
   (part_unresolved TRUE)
   (shows_extended_mic_arrows TRUE)
   (update_remote_feedback
      ($focus_item)
      {choose_part.lst set_selected $focus_item})
   (on_view_modify
      {TOGGLE_LEFTY_FLIP_AND_STATIC_VOCALS})
   (on_cancel
      {$this leave_choose_part_wait}))
#define CYMBAL_SELECTION
(SELECT_MSG
   {cond
      ({==
            {$component selected_sym}
            overshell_cymbals_continue}
         {$this finish_cymbal_selection FALSE})
      ({==
            {$component selected_sym}
            overshell_lefty_flip}
         {do
            ($options
               {{$this get_user}
                  get_gameplay_options})
            ($lefty_flipped
               {$options get_lefty})
            {$options
               set_lefty
               {! $lefty_flipped}}
            {$this update_drum_lefty_check $options}
            {if
               {$user player}
               {{$user player}
                  update_lefty_flip}}})
      ({==
            {$component selected_sym}
            overshell_enable_hihat}
         {$this toggle_hihat_pedal}
         {enable_hihat.chk
            set
            checked
            {!
               {enable_hihat.chk get checked}}})
      (TRUE
         {do
            ($checkmark $selected)
            {set
               $selected
               {$component selected_sym}}
            {set
               $checkmark
               {sprintf
                  "%s.chk"
                  {substr
                     $selected
                     10
                     {strlen $selected}}}}
            {$this toggle_cymbal $selected}
            {$checkmark
               set
               checked
               {!
                  {$checkmark get checked}}}
            {$component refresh}})})
(kState_OptionsDrum
   (view options_drum)
   (enter
      {$this
         update_drum_lefty_check
         {{$this get_user}
            get_gameplay_options}}
      {$this update_enable_hihat_check}
      {green_cym.chk
         set
         checked
         {$this is_cymbal_selected overshell_green_cym}}
      {blue_cym.chk
         set
         checked
         {$this is_cymbal_selected overshell_blue_cym}}
      {yellow_cym.chk
         set
         checked
         {$this is_cymbal_selected overshell_yellow_cym}}
      {cymbal_message.lbl set text_token overshell_drum_message}
      {$this refresh_cymbal_provider})
   (CYMBAL_SELECTION)
   (on_cancel
      {$this finish_cymbal_selection FALSE}))
(kState_OptionsDrumInSongSettings
   (view options_drum)
   (song_settings_flow TRUE)
   (remote_status remote_status_drum_options)
   (enter
      {$this
         update_drum_lefty_check
         {{$this get_user}
            get_gameplay_options}}
      {$this update_enable_hihat_check}
      {cymbal_message.lbl set text_token overshell_cymbal_message}
      {$this refresh_cymbal_provider})
   (CYMBAL_SELECTION)
   (on_cancel
      {$this finish_cymbal_selection TRUE}))
(kState_OptionsDrumMessage
   (view confirm_action)
   (song_settings_flow TRUE)
   (remote_status remote_status_drum_options)
   (update_view
      {handle
         ($this set_confirm_message overshell_cymbals_in_options_msg)})
   (SELECT_MSG
      {$this dismiss_cymbal_message}))
(kState_ChooseDiff
   (view choose_diff)
   (song_settings_flow TRUE)
   (shows_extended_mic_arrows TRUE)
   (enter {if {! $firstdiff}
	     {set $firstdiff TRUE}
		 {choose_diff.lst set_selected 3}})
   (SELECT_MSG
      {switch
         {choose_diff.lst selected_sym}
         (overshell_easy
            {$this select_difficulty kDifficultyEasy})
         (overshell_medium
            {$this select_difficulty kDifficultyMedium})
         (overshell_hard
            {$this select_difficulty kDifficultyHard})
         (overshell_expert
            {$this select_difficulty kDifficultyExpert})})
   (update_remote_feedback
      ($focus_item)
      {choose_diff.lst set_selected $focus_item})
   (on_view_modify
      {TOGGLE_LEFTY_FLIP_AND_STATIC_VOCALS})
   (on_cancel
      {$this leave_choose_difficulty}))
(kState_ChooseDiffConfirm
   (view confirm_action)
   (song_settings_flow TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_difficulty_confirm
            (overshell_continue overshell_restart overshell_cancel))}
      {handle
         ($this
            update_restart_allowed
            {{$this get_session_mgr}
               is_leader_local})})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_continue
            {$this confirm_choose_diff})
         (overshell_restart
            {$this confirm_choose_diff}
            {if_else
               {gamemode in_mode trainer}
               {{gamemode get game_panel}
                  restart_section}
               {session end_game kRestart}})
         (overshell_cancel
            {$this leave_difficulty_confirmation})})
   (on_cancel
      {$this leave_difficulty_confirmation}))
(kState_ReadyToPlay
   (view ready_to_play)
   (song_settings_flow TRUE)
   (ready_to_play TRUE)
   (on_cancel
      {$this leave_ready_to_play}))
(kState_ReadyToPlayWait
   (view ready_to_play)
   (song_settings_flow TRUE)
   (ready_to_play TRUE))
(kState_SongOptionsCancel
   (view cancel_song)
   (song_settings_flow TRUE)
   (part_unresolved TRUE)
   (update_view
      {$this
         update_cancel_song
         {gamemode in_mode party_shuffle}
         {{$this get_session_mgr}
            is_leader_local}})
   (update_remote_feedback
      ($focus_item)
      {cancel_song.lst set_selected $focus_item})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {if_else
               {session_mgr is_leader_local}
               {overshell end_override_flow kOverrideFlow_SongSettings TRUE}
               {do
                  {session_mgr disconnect}
                  {if
                     {overshell in_override_flow kOverrideFlow_SongSettings}
                     {overshell end_override_flow kOverrideFlow_SongSettings TRUE}}}})
         (overshell_confirm_no
            {$this show_song_options})
         (overshell_leave
            {$this attempt_remove_user})})
   (on_cancel
      {$this show_song_options}))
(kState_AutoSignInSony
   (view confirm_action)
   (register_online_flow TRUE)
   (update_view
      {handle
         ($this
            set_confirm_actions
            overshell_sign_in_fail_retry
            (overshell_sign_in_retry overshell_sign_in_cancel))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_sign_in_retry
            {platform_mgr run_net_start_utility})
         (overshell_sign_in_cancel
            {overshell end_override_flow kOverrideFlow_RegisterOnline TRUE})})
   (on_cancel
      {overshell end_override_flow kOverrideFlow_RegisterOnline TRUE}))
(kState_SignInSonyPrivilegeDenial
   (view confirm_action)
   (register_online_flow TRUE)
   (update_view
      {handle
         ($this set_confirm_message overshell_auto_sign_in_sony_restricted_privilege)})
   (SELECT_MSG
      {overshell end_override_flow kOverrideFlow_RegisterOnline TRUE})
   (on_cancel
      {overshell end_override_flow kOverrideFlow_RegisterOnline TRUE}))
(kState_AutoSignInRockCentral
   (view auto_sign_in_rock_central)
   (register_online_flow TRUE)
   #ifdef HX_WII
   (register_online_flow TRUE)
   #endif
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_sign_in_cancel
            {overshell end_override_flow kOverrideFlow_RegisterOnline TRUE})})
   (on_cancel
      {overshell end_override_flow kOverrideFlow_RegisterOnline TRUE}))
#define SIGN_IN_TO_REGISTER_STATE
((view sign_in_to_register)
   (register_online_flow TRUE)
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_sign_in_continue
            {$this show_sign_in_wait})
         (overshell_sign_in
            {platform_mgr
               signin
               1
               TRUE
               {$this get_user}})
         (overshell_sign_in_cancel
            {overshell end_override_flow kOverrideFlow_RegisterOnline TRUE})})
   (on_cancel
      {overshell end_override_flow kOverrideFlow_RegisterOnline TRUE}))
(kState_SignInToRegister
   SIGN_IN_TO_REGISTER_STATE
   (update_view
      {handle
         ($this setup_sign_in_to_register_list FALSE)}))
(kState_SignInToRegisterNoResolve
   SIGN_IN_TO_REGISTER_STATE
   (update_view
      {handle
         ($this setup_sign_in_to_register_list TRUE)}))
(kState_SignInWait
   (view sign_in_wait)
   (register_online_flow TRUE)
   (on_cancel
      {overshell end_override_flow kOverrideFlow_RegisterOnline TRUE}))
(kState_RegisteringOnline
   (view registering_online)
   (register_online_flow TRUE)
   (prevents_drop_out TRUE)
   (on_cancel
      {session_mgr disconnect}))
(kState_SignInFailRetry
   (view confirm_action)
   (register_online_flow TRUE)
   (update_view
      {handle
         ($this
            set_confirm_actions
            overshell_sign_in_fail_retry
            (overshell_sign_in_retry overshell_sign_in_cancel))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_sign_in_retry
            #ifdef HX_PS3
            {$this show_state kState_AutoSignInSony}
            #else
            {$this show_sign_in_wait}
            #endif)
         (overshell_sign_in_cancel
            {overshell end_override_flow kOverrideFlow_RegisterOnline TRUE})})
   (on_cancel
      {overshell end_override_flow kOverrideFlow_RegisterOnline TRUE}))
(kState_RegisterOnlineDenial
   (view confirm_action)
   (enter
      {handle
         ($this set_confirm_message overshell_register_online_denial_auto_vocals)})
   (SELECT_MSG
      {$this show_options})
   (on_cancel
      {$this show_options}))
(kState_KickUsers
   (view kick_users)
   (requires_online_session TRUE)
   (requires_remote_users TRUE)
   (update_view
      {$this update_kick_users_list})
   (on_cancel
      {$this show_online_options})
   (SELECT_MSG
      {$this
         kick_user
         {users.lst selected_pos}}))
(kState_KickConfirmation
   (view confirm_action)
   (requires_online_session TRUE)
   (requires_remote_users TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_kick_confirmation
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this confirm_kick})
         (overshell_confirm_no
            {$this leave_kick_confirmation})})
   (on_cancel
      {$this leave_kick_confirmation}))
(kState_MuteUsers
   (view mute_users)
   (requires_online_session TRUE)
   (requires_remote_users TRUE)
   (update_view
      {$this update_mute_users_list})
   (SELECT_MSG
      {$this
         toggle_mute_user
         {users.lst selected_pos}})
   (on_cancel
      {$this show_online_options}))
(kState_GamercardUsers
   (view gamercard_users)
   (requires_online_session TRUE)
   (update_view
      {$this update_gamercard_users_list})
   (SELECT_MSG
      {$this
         view_user_gamercard
         {users.lst selected_pos}})
   (on_cancel
      {$this show_online_options}))
(kState_InviteFriends
   (view invite_friends)
   (requires_online_session TRUE)
   (enter
      {$this update_friends_list})
   (update_view
      {$this update_friends_list})
   (on_cancel
      {$this show_online_options})
   (SELECT_MSG
      {$this
         invite_friend
         {invite_friends.lst selected_pos}}))
(kState_InviteFriendsDenial
   (view confirm_action)
   (requires_online_session TRUE)
   (update_view
      {handle
         ($this set_confirm_message error_invite_no_friends)})
   (on_cancel
      {$this show_online_options})
   (SELECT_MSG
      {$this show_online_options}))
(kState_EnterCalibration
   (view confirm_action)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_enter_calibration
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {cal_welcome_screen set cancel_screen main_hub_screen}
            {cal_welcome_screen set confirm_screen main_hub_screen}
            {input_mgr set_user $user}
            {critical_user_listener set_critical_user $user}
            {ui_event_mgr trigger_event go_to_calibration}
            {$this leave_options})
         (overshell_confirm_no
            {$this show_options_av_settings})})
   (on_cancel
      {$this show_options_av_settings}))
(kState_ChooseCharEdit
   (view choose_char_edit)
   (choose_char_flow TRUE)
   (char_edit_flow TRUE)
   (enter
      {if_else
         {{$this get_session_mgr}
            is_local}
         {choose_char_edit.lst enable_data overshell_rename_character}
         {choose_char_edit.lst disable_data overshell_rename_character}})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_rename_character
            {if
               #ifdef HX_PS3
               {!
                  {virtual_keyboard is_open}}
               #else
               TRUE
               #endif
               {$this set_paused 1}
               {virtual_keyboard
                  show_keyboard
                  $user
                  kCharNameLength
                  {localize create_char_vk_title}
                  {localize create_char_vk_desc}
                  {$this character_name}
                  $this
                  kVkNormalEntry}})
         (overshell_delete_character
            {$this attempt_show_char_delete})})
   (VIRTUAL_KEYBOARD_RESULT_MSG
      {if
         {&&
            $ok
            $this
            {!
               {==
                  $text
                  ""}}}
         {$this rename_character $text}
         {$this show_chars}
         {unless {|| {! $gotcha} {modifier_mgr is_modifier_active mod_auto_play}} {saveload_mgr autosave}}
      {$this set_paused 0}})
   (on_cancel
      {$this show_chars}))
(kState_ChooseCharDelete
   (view confirm_action)
   (choose_char_flow TRUE)
   (char_edit_flow TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_delete_character_confirmation
            (overshell_confirm_yes overshell_confirm_no))}
      {handle
         ($this set_default_option overshell_confirm_no)})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this delete_character}
            {$this show_chars}
            {$this
               refresh_highlighted_char
               {chars.lst selected_pos}}
            {unless {|| {! $gotcha} {modifier_mgr is_modifier_active mod_auto_play}} {saveload_mgr autosave}})
         (overshell_confirm_no
            {$this leave_char_delete})})
   (on_cancel
      {$this leave_char_delete}))
(kState_ChooseCharDeleteDenial
   (view confirm_action)
   (choose_char_flow TRUE)
   (view choose_char_edit)
   (enter
      {handle
         ($this set_confirm_message overshell_delete_char_denial)})
   (SELECT_MSG
      {$this show_chars})
   (on_cancel
      {$this show_chars}))
(kState_EnterCharCreator
   (view confirm_action)
   (choose_char_flow TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_enter_charactercreator
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {if_else
               {ui_event_mgr has_transition_event go_to_charactercreator}
               {do
                  {$this show_chars}}
               {do
                  {critical_user_listener set_critical_user $user}
                  {closet_mgr set_user $user}
                  {closet_mgr set_return_screen main_hub_screen}
                  {$this leave_options}
                  {ui_event_mgr trigger_event go_to_charactercreator}}})
         (overshell_confirm_no
            {$this show_chars})})
   (on_cancel
      {$this show_chars}))
(kState_EnterCredits
   (view confirm_action)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_enter_credits
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {meta_performer set_credits_pending}
            {ui_event_mgr trigger_event quit_to_main_credits}
            {$this leave_options})
         (overshell_confirm_no
            {$this show_options_extras})})
   (on_cancel
      {$this show_options_extras}))
(kState_CreditsDenial
   (view confirm_action)
   (update_view
      {handle
         ($this set_confirm_message overshell_credits_denial_remote_players)})
   (SELECT_MSG
      {$this show_options_extras})
   (on_cancel
      {$this show_options_extras}))
(kState_CharCreatorDenialNoProfile
   (view confirm_action)
   (choose_char_flow TRUE)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_sign_in_create_character
            (overshell_sign_in overshell_sign_in_cancel))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_sign_in
            {platform_mgr
               signin
               1
               FALSE
               {$this get_user}})
         (overshell_sign_in_cancel
            {$this show_chars})})
   (on_cancel
      {$this show_chars}))
(kState_EnterWiiSpeakOptions
   (view confirm_action)
   (enter
      {handle
         ($this
            set_confirm_actions
            overshell_wiispeak_confirm
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {ui_event_mgr trigger_event go_to_wiispeak_options}
            {$this leave_options})
         (overshell_confirm_no
            {$this show_game_options})}))
(kState_AutoSignInNintendo
   (view wait_wii)
   (register_online_flow TRUE)
   (on_cancel
      {$this leave_wait_wii}))
(kState_ChooseInvitation
   (view choose_invitation)
   (prevents_override TRUE)
   (return_to_options_menu TRUE)
   (update_view
      {rock_central clear_pending_invitations}
      {if_else
         {wii_invitations_provider is_invitation_pending}
         {invitations.lst refresh}
         {$this show_no_invitations}})
   (on_cancel
      {if_else
         {{$this get_state}
            get
            return_to_options_menu}
         {$this show_options}
         {$this show_online_options}})
   (SELECT_MSG
      {if
         {== $component invitations.lst}
         {do
            {wii_invitations_provider
               set_invitation
               {$component selected_pos}}
            {print
               "[ISDebug] accpeting invitation from "
               {wii_invitations_provider get_sender_name}
               "\n"}
            {accept_invitation.lbl
               set_token_fmt
               wii_friends_accept_invitation
               {wii_invitations_provider get_sender_name}}
            {$this show_accept_invitation}}}))
(kState_AcceptInvitation
   (view accept_invitation)
   (prevents_override TRUE)
   (on_cancel
      {$this show_choose_invitation})
   (SELECT_MSG
      {if
         {== $component accept_invitation.lst}
         {do
            {switch
               {$component selected_sym}
               (wii_friends_accept_invitation_yes
                  {wii_invitations_provider accept_invitation $user}
                  {$this leave_options})
               (wii_friends_accept_invitation_no
                  {wii_invitations_provider decline_invitation}
                  {$this show_choose_invitation})
               (wii_friends_accept_invitation_cancel
                  {$this show_choose_invitation})
               kDataUnhandled}}}))
(kState_NoInvitations
   (view no_invitations)
   (prevents_override TRUE)
   (on_cancel
      {$this show_options})
   (SELECT_MSG
      {$this show_options}))
(kState_CharCreatorDenialMaxChars
   (view confirm_action)
   (choose_char_flow TRUE)
   (update_view
      {set
         $max_characters
         {profile_mgr get_max_characters}}
      {handle
         ($this
            set_confirm_message_fmt
            (charcreator_full_profile_fmt $max_characters))})
   (SELECT_MSG
      {$this show_chars})
   (on_cancel
      {$this show_chars}))
(kState_CharCreatorDenial
   (view confirm_action)
   (choose_char_flow TRUE)
   (update_view
      {handle
         ($this set_confirm_message overshell_char_creator_denial_remote_players)})
   (SELECT_MSG
      {$this show_chars})
   (on_cancel
      {$this show_chars}))
(kState_CalibrationDenial
   (view confirm_action)
   (update_view
      {handle
         ($this set_confirm_message overshell_calibration_denial_remote_players)})
   (SELECT_MSG
      {$this show_options_av_settings})
   (on_cancel
      {$this show_options_av_settings}))
(kState_ReconnectController
   (view reconnect_controller)
   (prevents_override TRUE))
(kState_FirstTimeRG
   (view confirm_action)
   (prevents_override TRUE)
   (update_view
      {handle
         ($this
            set_confirm_actions
            overshell_first_time_rg
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this leave_options}
            {accomplishment_panel set_goal acc_guitartutorial01}
            {accomplishment_panel set_career_state kCareerState_Goal}
            {ui_event_mgr trigger_event go_to_campaign})
         (overshell_confirm_no
            {$this leave_options})})
   (on_cancel
      {$this leave_options}))
(kState_SecondTimeRG
   (view confirm_action)
   (prevents_override TRUE)
   (update_view
      {handle
         ($this
            set_confirm_actions
            overshell_second_time_rg
            (overshell_confirm_yes overshell_confirm_no))})
   (SELECT_MSG
      {switch
         {$component selected_sym}
         (overshell_confirm_yes
            {$this leave_options}
            {accomplishment_panel set_goal acc_guitartutorial03}
            {accomplishment_panel set_career_state kCareerState_Goal}
            {ui_event_mgr trigger_event go_to_campaign})
         (overshell_confirm_no
            {$this leave_options})})
   (on_cancel
      {$this leave_options}))